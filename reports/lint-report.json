[{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\altimeter.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'props.backgroundColor', 'props.backgroundVisible', 'props.customLayer', 'props.digitalFont', 'props.foregroundType', 'props.foregroundVisible', 'props.frameDesign', 'props.frameVisible', 'props.knobStyle', 'props.knobType', 'props.lcdColor', 'props.lcdVisible', 'props.size', and 'props.unitAltPos'. Either include them or remove the dependency array.","line":46,"column":6,"nodeType":"ArrayExpression","endLine":46,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [props.backgroundColor, props.backgroundVisible, props.customLayer, props.digitalFont, props.foregroundType, props.foregroundVisible, props.frameDesign, props.frameVisible, props.knobStyle, props.knobType, props.lcdColor, props.lcdVisible, props.size, props.unitAltPos]","fix":{"range":[1309,1311],"text":"[props.backgroundColor, props.backgroundVisible, props.customLayer, props.digitalFont, props.foregroundType, props.foregroundVisible, props.frameDesign, props.frameVisible, props.knobStyle, props.knobType, props.lcdColor, props.lcdVisible, props.size, props.unitAltPos]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'props.resetValueOnUnitChange'. Either include it or remove the dependency array.","line":61,"column":6,"nodeType":"ArrayExpression","endLine":61,"endColumn":24,"suggestions":[{"desc":"Update the dependencies array to be: [props.resetValueOnUnitChange, props.unitString]","fix":{"range":[1853,1871],"text":"[props.resetValueOnUnitChange, props.unitString]"}}]}],"errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useEffect } from \"react\"\r\nimport { AltimeterParams, Altimeter } from \"steelseries\"\r\nimport {\r\n  useSetGaugeProp,\r\n  useSetGaugeValue,\r\n  useUpdateGaugeProp,\r\n} from \"../hooks/gauge-update\"\r\n\r\ninterface Props extends AltimeterParams {\r\n  size: number\r\n\r\n  value?: number\r\n  animate?: boolean\r\n  animationCallback?: () => void\r\n\r\n  // Missing in AltimeterParams!\r\n  // BUG fix in @types/steelseries\r\n  titleString?: string\r\n  unitString?: string\r\n\r\n  resetValueOnUnitChange?: boolean\r\n}\r\n\r\nexport function AltimeterGauge(props: Props) {\r\n  const canvas = useRef<HTMLCanvasElement>(null)\r\n  const gauge = useRef<Altimeter>(null)\r\n\r\n  // Gauge init\r\n  useEffect(() => {\r\n    gauge.current = new Altimeter(canvas.current, {\r\n      frameDesign: props.frameDesign,\r\n      frameVisible: props.frameVisible,\r\n      backgroundColor: props.backgroundColor,\r\n      backgroundVisible: props.backgroundVisible,\r\n      foregroundType: props.foregroundType,\r\n      foregroundVisible: props.foregroundVisible,\r\n      knobType: props.knobType,\r\n      knobStyle: props.knobStyle,\r\n      lcdColor: props.lcdColor,\r\n      digitalFont: props.digitalFont,\r\n      lcdVisible: props.lcdVisible,\r\n      size: props.size,\r\n      unitAltPos: props.unitAltPos,\r\n      customLayer: props.customLayer,\r\n    })\r\n  }, [])\r\n\r\n  // Gauge update\r\n  useUpdateGaugeProp(gauge, \"setFrameDesign\", props.frameDesign)\r\n  useUpdateGaugeProp(gauge, \"setBackgroundColor\", props.backgroundColor)\r\n  useUpdateGaugeProp(gauge, \"setForegroundType\", props.foregroundType)\r\n\r\n  useUpdateGaugeProp(gauge, \"setLcdColor\", props.lcdColor)\r\n\r\n  useSetGaugeProp(gauge, \"setTitleString\", props.titleString)\r\n  useEffect(() => {\r\n    if (gauge.current) {\r\n      if (props.resetValueOnUnitChange) gauge.current.setValue(0)\r\n      gauge.current.setUnitString(props.unitString)\r\n    }\r\n  }, [props.unitString])\r\n\r\n  useSetGaugeValue(gauge, props.value, props.animate, props.animationCallback)\r\n\r\n  return <canvas ref={canvas}></canvas>\r\n}\r\n"},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\battery.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'props.size'. Either include it or remove the dependency array.","line":20,"column":6,"nodeType":"ArrayExpression","endLine":20,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [props.size]","fix":{"range":[529,531],"text":"[props.size]"}}]}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from \"react\"\r\nimport { BatteryParams, Battery } from \"steelseries\"\r\nimport { useSetGaugeProp } from \"../hooks/gauge-update\"\r\n\r\ninterface Props extends BatteryParams {\r\n  size: number\r\n}\r\n\r\nexport function BatteryGauge(props: Props) {\r\n  const canvas = useRef<HTMLCanvasElement>(null)\r\n  const gauge = useRef<Battery>(null)\r\n\r\n  // Init gauge\r\n  useEffect(() => {\r\n    if (canvas.current) {\r\n      gauge.current = new Battery(canvas.current, {\r\n        size: props.size,\r\n      })\r\n    }\r\n  }, [])\r\n\r\n  // Update gauge\r\n  useSetGaugeProp(gauge, \"setValue\", props.value)\r\n\r\n  return <canvas ref={canvas}></canvas>\r\n}\r\n"},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\class-components\\altimeter-class.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\class-components\\battery-class.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\class-components\\clock-class.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\class-components\\compass-class.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\class-components\\display-multi-class.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\class-components\\display-single-class.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\class-components\\gauge-component.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'P' is defined but never used.","line":17,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'GC' is defined but never used.","line":17,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'GP' is defined but never used.","line":17,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":50},{"ruleId":"tsdoc/syntax","severity":1,"message":"tsdoc-param-tag-missing-hyphen: The @param block should be followed by a parameter name and then a hyphen","line":26,"column":6,"nodeType":null,"messageId":"tsdoc-param-tag-missing-hyphen","endLine":26,"endColumn":12}],"errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\"\r\n\r\ndeclare var __DEV__: boolean\r\n\r\nexport function capitalize(str: string) {\r\n  return str.charAt(0).toUpperCase() + str.slice(1)\r\n}\r\n\r\nexport function getSetterName(prop: string) {\r\n  return `set${capitalize(prop)}`\r\n}\r\n\r\ninterface IGaugeConstructor<GC, GP> {\r\n  new (canvas: HTMLCanvasElement | string, parameters?: GP): GC\r\n}\r\n\r\nexport default interface GaugeComponent<P, GC, GP> {\r\n  /**\r\n   * Additional code to be executed right before gauge init\r\n   */\r\n  gaugePreInit?(): void\r\n\r\n  /**\r\n   * Additional code to be execudet right after gauge init\r\n   *\r\n   * @param animate enable animation, if gauge supports it\r\n   */\r\n  gaugePostInit?(animate: boolean): void\r\n\r\n  /**\r\n   * Execudet right before gauge update\r\n   */\r\n  gaugePreUpdate?(): void\r\n\r\n  /**\r\n   * Executed right after gauge update\r\n   */\r\n  gaugePostUpdate?(): void\r\n}\r\nexport default abstract class GaugeComponent<\r\n  P,\r\n  GC,\r\n  GP\r\n> extends React.Component<P> {\r\n  /**\r\n   * Steelseries Gauge Class\r\n   */\r\n  abstract GaugeClass: IGaugeConstructor<GC, GP>\r\n\r\n  /**\r\n   * Props ignored in update watch\r\n   */\r\n  IgnoredProps: string[] = []\r\n\r\n  canvasRef: React.RefObject<HTMLCanvasElement>\r\n  gauge: GC\r\n\r\n  constructor(props: P) {\r\n    super(props)\r\n    this.canvasRef = React.createRef()\r\n  }\r\n\r\n  log(_msg?: string) {\r\n    if (__DEV__) {\r\n      console.log(`[${this.constructor.name}] ${_msg || \"\"}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return Steelseries gauge params, based on this.props\r\n   */\r\n  abstract getGaugeParams(): GP\r\n\r\n  componentDidMount(animate: boolean = true) {\r\n    if (this.canvasRef.current && this.GaugeClass) {\r\n      if (__DEV__) {\r\n        this.log(\"init\")\r\n      }\r\n\r\n      if (this.gaugePreInit) {\r\n        this.gaugePreInit()\r\n      }\r\n\r\n      this.gauge = new this.GaugeClass(\r\n        this.canvasRef.current,\r\n        this.getGaugeParams()\r\n      )\r\n\r\n      if (this.gaugePostInit) {\r\n        this.gaugePostInit(animate)\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prev: P) {\r\n    if (this.gauge) {\r\n      if (this.gaugePreUpdate) {\r\n        this.gaugePreUpdate()\r\n      }\r\n\r\n      let setter: string\r\n      let setters: { (): void }[] = []\r\n      for (let prop in this.props) {\r\n        if (\r\n          this.props[prop] !== prev[prop] &&\r\n          !this.IgnoredProps.includes(prop)\r\n        ) {\r\n          setter = getSetterName(prop)\r\n          if (setter in this && typeof this[setter] === \"function\") {\r\n            //this[setter]();\r\n            setters.push(this[setter].bind(this))\r\n          } else {\r\n            if (__DEV__) {\r\n              this.log(\"gauge re-init...\")\r\n            }\r\n\r\n            this.componentDidMount(false)\r\n            return\r\n          }\r\n        }\r\n      }\r\n\r\n      if (setters.length > 0) {\r\n        if (__DEV__) {\r\n          this.log(\"calling setters...\")\r\n        }\r\n\r\n        setters.forEach((fun) => fun())\r\n      }\r\n\r\n      if (this.gaugePostUpdate) {\r\n        this.gaugePostUpdate()\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <canvas ref={this.canvasRef}></canvas>\r\n  }\r\n}\r\n"},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\class-components\\horizon-class.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\class-components\\led-class.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\class-components\\level-class.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\class-components\\light-bulb-class.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\class-components\\linear-bargraph-class.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\class-components\\linear-class.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\class-components\\odometer-class.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\class-components\\radial-bargraph-class.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\class-components\\radial-class.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\class-components\\radial-vertical-class.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\class-components\\stopwatch-class.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\class-components\\traffic-light-class.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\class-components\\wind-direction-class.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\class-components\\wind-rose-class.tsx","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\clock.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'props.backgroundColor', 'props.backgroundVisible', 'props.customLayer', 'props.foregroundType', 'props.foregroundVisible', 'props.frameDesign', 'props.frameVisible', 'props.isAutomatic', 'props.pointerColor', 'props.pointerType', 'props.secondPointerTick', 'props.secondPointerVisible', 'props.size', 'props.timeZoneOffsetHour', 'props.timeZoneOffsetMinute', and 'props.value'. Either include them or remove the dependency array.","line":63,"column":6,"nodeType":"ArrayExpression","endLine":63,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [props.backgroundColor, props.backgroundVisible, props.customLayer, props.foregroundType, props.foregroundVisible, props.frameDesign, props.frameVisible, props.isAutomatic, props.pointerColor, props.pointerType, props.secondPointerTick, props.secondPointerVisible, props.size, props.timeZoneOffsetHour, props.timeZoneOffsetMinute, props.value]","fix":{"range":[2095,2097],"text":"[props.backgroundColor, props.backgroundVisible, props.customLayer, props.foregroundType, props.foregroundVisible, props.frameDesign, props.frameVisible, props.isAutomatic, props.pointerColor, props.pointerType, props.secondPointerTick, props.secondPointerVisible, props.size, props.timeZoneOffsetHour, props.timeZoneOffsetMinute, props.value]"}}]}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from \"react\"\r\nimport { ClockParams, Clock } from \"steelseries\"\r\nimport { useDidUpdate } from \"../hooks/common\"\r\nimport { useUpdateGaugeProp } from \"../hooks/gauge-update\"\r\n\r\ntype ExcludeParams = \"hour\" | \"minute\" | \"second\" | \"secondMovesContinuous\"\r\ninterface Props extends Partial<Omit<ClockParams, ExcludeParams>> {\r\n  size: number\r\n  value: Date\r\n\r\n  secondPointerTick?: boolean\r\n}\r\n\r\nexport function ClockGauge(props: Props) {\r\n  const canvas = useRef<HTMLCanvasElement>(null)\r\n  const gauge = useRef<Clock>(null)\r\n\r\n  // Init gauge\r\n  useEffect(() => {\r\n    if (canvas.current) {\r\n      gauge.current = new Clock(canvas.current, {\r\n        frameDesign: props.frameDesign,\r\n        frameVisible: props.frameVisible,\r\n        backgroundColor: props.backgroundColor,\r\n        backgroundVisible: props.backgroundVisible,\r\n        foregroundType: props.foregroundType,\r\n        foregroundVisible: props.foregroundVisible,\r\n        pointerType: props.pointerType,\r\n        pointerColor: props.pointerColor,\r\n        size: props.size,\r\n\r\n        hour: props.value.getHours(),\r\n        minute: props.value.getMinutes(),\r\n        second: props.value.getSeconds(),\r\n\r\n        /* Should be opional, but they're not... */\r\n        // BUG fix in @types/steelseries\r\n        timeZoneOffsetHour:\r\n          props.timeZoneOffsetHour === undefined ? 0 : props.timeZoneOffsetHour,\r\n        timeZoneOffsetMinute:\r\n          props.timeZoneOffsetMinute === undefined\r\n            ? 0\r\n            : props.timeZoneOffsetMinute,\r\n        isAutomatic: props.isAutomatic === undefined ? true : props.isAutomatic,\r\n\r\n        secondMovesContinuous:\r\n          props.secondPointerTick === undefined\r\n            ? true\r\n            : !props.secondPointerTick,\r\n        secondPointerVisible:\r\n          props.secondPointerVisible === undefined\r\n            ? true\r\n            : props.secondPointerVisible,\r\n\r\n        customLayer: props.customLayer,\r\n      })\r\n    }\r\n\r\n    // Cleanup\r\n    return function () {\r\n      gauge.current && gauge.current.setAutomatic(false)\r\n    }\r\n  }, [])\r\n\r\n  // Gauge update\r\n  useUpdateGaugeProp(gauge, \"setFrameDesign\", props.frameDesign)\r\n  useUpdateGaugeProp(gauge, \"setBackgroundColor\", props.backgroundColor)\r\n  useUpdateGaugeProp(gauge, \"setForegroundType\", props.foregroundType)\r\n\r\n  useUpdateGaugeProp(gauge, \"setPointerType\", props.pointerType)\r\n  useUpdateGaugeProp(gauge, \"setPointerColor\", props.pointerColor)\r\n\r\n  useUpdateGaugeProp(gauge, \"setAutomatic\", props.isAutomatic)\r\n  useUpdateGaugeProp(gauge, \"setTimeZoneOffsetHour\", props.timeZoneOffsetHour)\r\n  useUpdateGaugeProp(\r\n    gauge,\r\n    \"setTimeZoneOffsetMinute\",\r\n    props.timeZoneOffsetMinute\r\n  )\r\n\r\n  useUpdateGaugeProp(\r\n    gauge,\r\n    \"setSecondPointerVisible\",\r\n    props.secondPointerVisible\r\n  )\r\n  useDidUpdate(() => {\r\n    if (gauge.current) {\r\n      if (props.isAutomatic) gauge.current.setAutomatic(false)\r\n      gauge.current.setSecondMovesContinuous(!props.secondPointerTick)\r\n      if (props.isAutomatic) gauge.current.setAutomatic(true)\r\n    }\r\n  }, [props.secondPointerTick])\r\n\r\n  useDidUpdate(() => {\r\n    if (gauge.current) {\r\n      gauge.current\r\n        .setHour(props.value.getHours())\r\n        .setMinute(props.value.getMinutes())\r\n        .setSecond(props.value.getSeconds())\r\n    }\r\n  }, [props.value])\r\n\r\n  return <canvas ref={canvas}></canvas>\r\n}\r\n"},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\compass.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'props.backgroundColor', 'props.backgroundVisible', 'props.customLayer', 'props.degreeScale', 'props.foregroundType', 'props.foregroundVisible', 'props.frameDesign', 'props.frameVisible', 'props.knobStyle', 'props.knobType', 'props.pointSymbols', 'props.pointSymbolsVisible', 'props.pointerColor', 'props.pointerType', 'props.roseVisible', 'props.rotateFace', and 'props.size'. Either include them or remove the dependency array.","line":40,"column":6,"nodeType":"ArrayExpression","endLine":40,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [props.backgroundColor, props.backgroundVisible, props.customLayer, props.degreeScale, props.foregroundType, props.foregroundVisible, props.frameDesign, props.frameVisible, props.knobStyle, props.knobType, props.pointSymbols, props.pointSymbolsVisible, props.pointerColor, props.pointerType, props.roseVisible, props.rotateFace, props.size]","fix":{"range":[1329,1331],"text":"[props.backgroundColor, props.backgroundVisible, props.customLayer, props.degreeScale, props.foregroundType, props.foregroundVisible, props.frameDesign, props.frameVisible, props.knobStyle, props.knobType, props.pointSymbols, props.pointSymbolsVisible, props.pointerColor, props.pointerType, props.roseVisible, props.rotateFace, props.size]"}}]}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from \"react\"\r\nimport { CompassParams, Compass } from \"steelseries\"\r\nimport { useSetGaugeValue, useUpdateGaugeProp } from \"../hooks/gauge-update\"\r\n\r\ninterface Props extends CompassParams {\r\n  size: number\r\n\r\n  value?: number\r\n  animate?: boolean\r\n  animationCallback?: () => void\r\n}\r\n\r\nexport function CompassGauge(props: Props) {\r\n  const canvas = useRef<HTMLCanvasElement>(null)\r\n  const gauge = useRef<Compass>(null)\r\n\r\n  // Init gauge\r\n  useEffect(() => {\r\n    if (canvas.current) {\r\n      gauge.current = new Compass(canvas.current, {\r\n        frameDesign: props.frameDesign,\r\n        frameVisible: props.frameVisible,\r\n        backgroundColor: props.backgroundColor,\r\n        backgroundVisible: props.backgroundVisible,\r\n        foregroundType: props.foregroundType,\r\n        foregroundVisible: props.foregroundVisible,\r\n        knobType: props.knobType,\r\n        knobStyle: props.knobStyle,\r\n        pointerType: props.pointerType,\r\n        pointerColor: props.pointerColor,\r\n        size: props.size,\r\n        pointSymbols: props.pointSymbols,\r\n        pointSymbolsVisible: props.pointSymbolsVisible,\r\n        degreeScale: props.degreeScale,\r\n        roseVisible: props.roseVisible,\r\n        rotateFace: props.rotateFace,\r\n        customLayer: props.customLayer,\r\n      })\r\n    }\r\n  }, [])\r\n\r\n  // Update gauge\r\n  useUpdateGaugeProp(gauge, \"setFrameDesign\", props.frameDesign)\r\n  useUpdateGaugeProp(gauge, \"setBackgroundColor\", props.backgroundColor)\r\n  useUpdateGaugeProp(gauge, \"setForegroundType\", props.foregroundType)\r\n\r\n  useUpdateGaugeProp(gauge, \"setPointerType\", props.pointerType)\r\n  useUpdateGaugeProp(gauge, \"setPointerColor\", props.pointerColor)\r\n\r\n  useUpdateGaugeProp(gauge, \"setPointSymbols\", props.pointSymbols)\r\n\r\n  useSetGaugeValue(gauge, props.value, props.animate, props.animationCallback)\r\n\r\n  return <canvas ref={canvas}></canvas>\r\n}\r\n"},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\display-multi.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'props.altValue', 'props.detailString', 'props.digitalFont', 'props.headerString', 'props.height', 'props.lcdColor', 'props.lcdDecimals', 'props.linkAltValue', 'props.showDetailString', 'props.showHeaderString', 'props.showUnitString', 'props.unitString', 'props.value', 'props.valuesNumeric', and 'props.width'. Either include them or remove the dependency array.","line":45,"column":6,"nodeType":"ArrayExpression","endLine":45,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [props.altValue, props.detailString, props.digitalFont, props.headerString, props.height, props.lcdColor, props.lcdDecimals, props.linkAltValue, props.showDetailString, props.showHeaderString, props.showUnitString, props.unitString, props.value, props.valuesNumeric, props.width]","fix":{"range":[1436,1438],"text":"[props.altValue, props.detailString, props.digitalFont, props.headerString, props.height, props.lcdColor, props.lcdDecimals, props.linkAltValue, props.showDetailString, props.showHeaderString, props.showUnitString, props.unitString, props.value, props.valuesNumeric, props.width]"}}]}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from \"react\"\r\nimport { DisplayMultiParams, DisplayMulti } from \"steelseries\"\r\nimport { useUpdateGaugeProp } from \"../hooks/gauge-update\"\r\n\r\ntype ExcludedParams =\r\n  | \"headerStringVisible\"\r\n  | \"detailStringVisible\"\r\n  | \"unitStringVisible\"\r\ninterface Props extends Omit<DisplayMultiParams, ExcludedParams> {\r\n  width: number\r\n  height: number\r\n\r\n  showHeaderString?: boolean\r\n  showDetailString?: boolean\r\n  showUnitString?: boolean\r\n}\r\n\r\nexport function DisplayMultiGauge(props: Props) {\r\n  const canvas = useRef<HTMLCanvasElement>(null)\r\n  const gauge = useRef<DisplayMulti>(null)\r\n\r\n  // Init gauge\r\n  useEffect(() => {\r\n    if (canvas.current) {\r\n      gauge.current = new DisplayMulti(canvas.current, {\r\n        width: props.width,\r\n        height: props.height,\r\n        headerString: props.headerString,\r\n        headerStringVisible: props.showHeaderString,\r\n        detailString: props.detailString,\r\n        detailStringVisible: props.showDetailString,\r\n        unitString: props.unitString,\r\n        unitStringVisible: props.showUnitString,\r\n        linkAltValue:\r\n          props.linkAltValue === undefined ? false : props.linkAltValue,\r\n        valuesNumeric: props.valuesNumeric,\r\n        value: props.value,\r\n        altValue: props.altValue,\r\n\r\n        lcdColor: props.lcdColor,\r\n        digitalFont: props.digitalFont,\r\n        lcdDecimals: props.lcdDecimals,\r\n      })\r\n    }\r\n  }, [])\r\n\r\n  // Update gauge\r\n  useUpdateGaugeProp(gauge, \"setLcdColor\", props.lcdColor)\r\n\r\n  useUpdateGaugeProp(gauge, \"setValue\", props.value)\r\n  useUpdateGaugeProp(gauge, \"setAltValue\", props.altValue)\r\n\r\n  return <canvas ref={canvas}></canvas>\r\n}\r\n"},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\display-single.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'props.autoScroll', 'props.digitalFont', 'props.headerString', 'props.height', 'props.infiniteScroll', 'props.lcdColor', 'props.lcdDecimals', 'props.section', 'props.showHeaderString', 'props.showUnitString', 'props.unitString', 'props.value', 'props.valuesNumeric', and 'props.width'. Either include them or remove the dependency array.","line":48,"column":6,"nodeType":"ArrayExpression","endLine":48,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [props.autoScroll, props.digitalFont, props.headerString, props.height, props.infiniteScroll, props.lcdColor, props.lcdDecimals, props.section, props.showHeaderString, props.showUnitString, props.unitString, props.value, props.valuesNumeric, props.width]","fix":{"range":[1416,1418],"text":"[props.autoScroll, props.digitalFont, props.headerString, props.height, props.infiniteScroll, props.lcdColor, props.lcdDecimals, props.section, props.showHeaderString, props.showUnitString, props.unitString, props.value, props.valuesNumeric, props.width]"}}]}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from \"react\"\r\nimport { DisplaySingleParams, DisplaySingle } from \"steelseries\"\r\nimport { useUpdateGaugeProp } from \"../hooks/gauge-update\"\r\n\r\ntype ExcludedParams =\r\n  | \"headerStringVisible\"\r\n  | \"unitStringVisible\"\r\n  | \"alwaysScroll\"\r\ninterface Props extends Omit<DisplaySingleParams, ExcludedParams> {\r\n  width: number\r\n  height: number\r\n\r\n  showHeaderString?: boolean\r\n  showUnitString?: boolean\r\n\r\n  infiniteScroll?: boolean\r\n}\r\n\r\nexport function DisplaySingleGauge(props: Props) {\r\n  const canvas = useRef<HTMLCanvasElement>(null)\r\n  const gauge = useRef<DisplaySingle>(null)\r\n\r\n  // Init gauge\r\n  useEffect(() => {\r\n    if (canvas.current) {\r\n      gauge.current = new DisplaySingle(canvas.current, {\r\n        width: props.width,\r\n        height: props.height,\r\n        section: props.section,\r\n        headerString: props.headerString,\r\n        headerStringVisible: props.showHeaderString,\r\n        unitString: props.unitString,\r\n        unitStringVisible: props.showUnitString,\r\n        valuesNumeric: props.valuesNumeric,\r\n        value: props.value,\r\n        alwaysScroll: props.infiniteScroll,\r\n        autoScroll: props.autoScroll,\r\n\r\n        lcdColor: props.lcdColor,\r\n        digitalFont: props.digitalFont,\r\n        lcdDecimals: props.lcdDecimals,\r\n      })\r\n    }\r\n\r\n    return function () {\r\n      gauge.current && gauge.current.setScrolling(false)\r\n    }\r\n  }, [])\r\n\r\n  // Update gauge\r\n  useUpdateGaugeProp(gauge, \"setLcdColor\", props.lcdColor)\r\n  useUpdateGaugeProp(gauge, \"setSection\", props.section)\r\n  useUpdateGaugeProp(gauge, \"setScrolling\", props.infiniteScroll)\r\n\r\n  useUpdateGaugeProp(gauge, \"setValue\", props.value)\r\n\r\n  return <canvas ref={canvas}></canvas>\r\n}\r\n"},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\horizon.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'props.foregroundType', 'props.foregroundVisible', 'props.frameDesign', 'props.frameVisible', 'props.pointerColor', and 'props.size'. Either include them or remove the dependency array.","line":33,"column":6,"nodeType":"ArrayExpression","endLine":33,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [props.foregroundType, props.foregroundVisible, props.frameDesign, props.frameVisible, props.pointerColor, props.size]","fix":{"range":[937,939],"text":"[props.foregroundType, props.foregroundVisible, props.frameDesign, props.frameVisible, props.pointerColor, props.size]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'props.animate' and 'props.pitchAnimationCallback'. Either include them or remove the dependency array.","line":49,"column":6,"nodeType":"ArrayExpression","endLine":49,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [props.animate, props.pitch, props.pitchAnimationCallback]","fix":{"range":[1417,1430],"text":"[props.animate, props.pitch, props.pitchAnimationCallback]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'props.animate' and 'props.rollAnimationCallback'. Either include them or remove the dependency array.","line":56,"column":6,"nodeType":"ArrayExpression","endLine":56,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [props.animate, props.roll, props.rollAnimationCallback]","fix":{"range":[1640,1652],"text":"[props.animate, props.roll, props.rollAnimationCallback]"}}]}],"errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from \"react\"\r\nimport { HorizonParams, Horizon } from \"steelseries\"\r\nimport { useSetGaugeProp, useUpdateGaugeProp } from \"../hooks/gauge-update\"\r\n\r\ninterface Props extends HorizonParams {\r\n  size: number\r\n\r\n  roll?: number\r\n  pitch?: number\r\n  pitchOffset?: number\r\n\r\n  animate?: boolean\r\n  rollAnimationCallback?: () => void\r\n  pitchAnimationCallback?: () => void\r\n}\r\n\r\nexport function HorizonGauge(props: Props) {\r\n  const canvas = useRef<HTMLCanvasElement>(null)\r\n  const gauge = useRef<Horizon>(null)\r\n\r\n  // Init gauge\r\n  useEffect(() => {\r\n    if (canvas.current) {\r\n      gauge.current = new Horizon(canvas.current, {\r\n        size: props.size,\r\n        pointerColor: props.pointerColor,\r\n        frameDesign: props.frameDesign,\r\n        frameVisible: props.frameVisible,\r\n        foregroundType: props.foregroundType,\r\n        foregroundVisible: props.foregroundVisible,\r\n      })\r\n    }\r\n  }, [])\r\n\r\n  // Update gauge\r\n  useUpdateGaugeProp(gauge, \"setFrameDesign\", props.frameDesign)\r\n  useUpdateGaugeProp(gauge, \"setForegroundType\", props.foregroundType)\r\n\r\n  useSetGaugeProp(gauge, \"setPitchOffset\", props.pitchOffset)\r\n  useEffect(() => {\r\n    if (gauge.current) {\r\n      props.animate\r\n        ? gauge.current.setPitchAnimated(\r\n            props.pitch,\r\n            props.pitchAnimationCallback\r\n          )\r\n        : gauge.current.setPitch(props.pitch)\r\n    }\r\n  }, [props.pitch])\r\n  useEffect(() => {\r\n    if (gauge.current) {\r\n      props.animate\r\n        ? gauge.current.setRollAnimated(props.roll, props.rollAnimationCallback)\r\n        : gauge.current.setRoll(props.roll)\r\n    }\r\n  }, [props.roll])\r\n\r\n  return <canvas ref={canvas}></canvas>\r\n}\r\n"},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\led.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'props.ledColor' and 'props.size'. Either include them or remove the dependency array.","line":27,"column":6,"nodeType":"ArrayExpression","endLine":27,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [props.ledColor, props.size]","fix":{"range":[681,683],"text":"[props.ledColor, props.size]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'props.on'. Either include it or remove the dependency array.","line":40,"column":6,"nodeType":"ArrayExpression","endLine":40,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [props.blink, props.on]","fix":{"range":[1050,1063],"text":"[props.blink, props.on]"}}]}],"errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from \"react\"\r\nimport { LedParams, Led } from \"steelseries\"\r\nimport { useSetGaugeProp, useUpdateGaugeProp } from \"../hooks/gauge-update\"\r\n\r\ninterface Props extends LedParams {\r\n  size: number\r\n  on?: boolean\r\n  blink?: boolean\r\n}\r\n\r\nexport function LedGauge(props: Props) {\r\n  const canvas = useRef<HTMLCanvasElement>(null)\r\n  const gauge = useRef<Led>(null)\r\n\r\n  // Init gauge\r\n  useEffect(() => {\r\n    if (canvas.current) {\r\n      gauge.current = new Led(canvas.current, {\r\n        size: props.size,\r\n        ledColor: props.ledColor,\r\n      })\r\n    }\r\n\r\n    return function () {\r\n      gauge.current && gauge.current.blink(false)\r\n    }\r\n  }, [])\r\n\r\n  // Update gauge\r\n  useUpdateGaugeProp(gauge, \"setLedColor\", props.ledColor)\r\n\r\n  useSetGaugeProp(gauge, \"setLedOnOff\", props.on)\r\n  useEffect(() => {\r\n    if (gauge.current) {\r\n      gauge.current.blink(props.blink)\r\n\r\n      // when disabling blinking, bring back led to previous state\r\n      if (!props.blink) gauge.current.setLedOnOff(props.on)\r\n    }\r\n  }, [props.blink])\r\n\r\n  return <canvas ref={canvas}></canvas>\r\n}\r\n"},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\level.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'props.backgroundColor', 'props.backgroundVisible', 'props.decimalsVisible', 'props.foregroundType', 'props.foregroundVisible', 'props.frameDesign', 'props.frameVisible', 'props.pointerColor', 'props.rotateFace', 'props.size', and 'props.textOrientationFixed'. Either include them or remove the dependency array.","line":34,"column":6,"nodeType":"ArrayExpression","endLine":34,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [props.backgroundColor, props.backgroundVisible, props.decimalsVisible, props.foregroundType, props.foregroundVisible, props.frameDesign, props.frameVisible, props.pointerColor, props.rotateFace, props.size, props.textOrientationFixed]","fix":{"range":[1089,1091],"text":"[props.backgroundColor, props.backgroundVisible, props.decimalsVisible, props.foregroundType, props.foregroundVisible, props.frameDesign, props.frameVisible, props.pointerColor, props.rotateFace, props.size, props.textOrientationFixed]"}}]}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from \"react\"\r\nimport { LevelParams, Level } from \"steelseries\"\r\nimport { useSetGaugeValue, useUpdateGaugeProp } from \"../hooks/gauge-update\"\r\n\r\ninterface Props extends LevelParams {\r\n  size: number\r\n  value?: number\r\n\r\n  animate?: boolean\r\n  animationCallback?: () => void\r\n}\r\n\r\nexport function LevelGauge(props: Props) {\r\n  const canvas = useRef<HTMLCanvasElement>(null)\r\n  const gauge = useRef<Level>(null)\r\n\r\n  // Init gauge\r\n  useEffect(() => {\r\n    if (canvas.current) {\r\n      gauge.current = new Level(canvas.current, {\r\n        size: props.size,\r\n        frameDesign: props.frameDesign,\r\n        frameVisible: props.frameVisible,\r\n        backgroundColor: props.backgroundColor,\r\n        backgroundVisible: props.backgroundVisible,\r\n        foregroundType: props.foregroundType,\r\n        foregroundVisible: props.foregroundVisible,\r\n        pointerColor: props.pointerColor,\r\n        decimalsVisible: props.decimalsVisible,\r\n        textOrientationFixed: props.textOrientationFixed,\r\n        rotateFace: props.rotateFace,\r\n      })\r\n    }\r\n  }, [])\r\n\r\n  // Update gauge\r\n  useUpdateGaugeProp(gauge, \"setFrameDesign\", props.frameDesign)\r\n  useUpdateGaugeProp(gauge, \"setBackgroundColor\", props.backgroundColor)\r\n  useUpdateGaugeProp(gauge, \"setForegroundType\", props.foregroundType)\r\n\r\n  useUpdateGaugeProp(gauge, \"setPointerColor\", props.pointerColor)\r\n\r\n  useSetGaugeValue(gauge, props.value, props.animate, props.animationCallback)\r\n\r\n  return <canvas ref={canvas}></canvas>\r\n}\r\n"},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\light-bulb.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'ID', 'props.glowColor', 'props.height', and 'props.width'. Either include them or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [ID, props.glowColor, props.height, props.width]","fix":{"range":[944,946],"text":"[ID, props.glowColor, props.height, props.width]"}}]}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from \"react\"\r\n// @ts-ignore\r\nimport { LightbulbParams, LightBulb } from \"steelseries\"\r\nimport { useSetGaugeProp, useUpdateGaugeProp } from \"../hooks/gauge-update\"\r\n\r\ninterface Props extends Partial<LightbulbParams> {\r\n  width: number\r\n  height: number\r\n  on?: boolean\r\n  alpha?: number\r\n}\r\n\r\nexport function LightBulbGauge(props: Props) {\r\n  const canvas = useRef<HTMLCanvasElement>(null)\r\n  const gauge = useRef<LightBulb>(null)\r\n\r\n  const ID = `lightbulb-${uid()}`\r\n\r\n  // Init gauge\r\n  useEffect(() => {\r\n    if (canvas.current) {\r\n      gauge.current = new LightBulb(ID, {\r\n        width: props.width,\r\n        height: props.height,\r\n\r\n        // Should be optional, but it's not...\r\n        // Default value taken from 'steelseries' original library source\r\n        // BUG fix in @types/steelseries\r\n        glowColor: props.glowColor === undefined ? \"#ffff00\" : props.glowColor,\r\n      })\r\n    }\r\n  }, [])\r\n\r\n  // Gauge update\r\n  useUpdateGaugeProp(gauge, \"setGlowColor\", props.glowColor)\r\n\r\n  useSetGaugeProp(gauge, \"setOn\", props.on)\r\n  useSetGaugeProp(gauge, \"setAlpha\", props.alpha)\r\n\r\n  return <canvas ref={canvas} id={ID}></canvas>\r\n}\r\n\r\nfunction uid() {\r\n  return (performance.now().toString(36) + Math.random().toString(36)).replace(\r\n    /\\./g,\r\n    \"\"\r\n  )\r\n}\r\n"},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\linear-bargraph.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'props.alarmSound', 'props.backgroundColor', 'props.backgroundVisible', 'props.digitalFont', 'props.foregroundVisible', 'props.frameDesign', 'props.frameVisible', 'props.fullScaleDeflectionTime', 'props.height', 'props.labelNumberFormat', 'props.lcdColor', 'props.lcdDecimals', 'props.lcdVisible', 'props.ledColor', 'props.maxValue', 'props.minValue', 'props.niceScale', 'props.playAlarm', 'props.showLed', 'props.showMaxMeasuredValue', 'props.showMinMeasuredValue', 'props.showThreshold', 'props.threshold', 'props.thresholdRising', 'props.titleString', 'props.unitString', 'props.valueColor', 'props.valueGradient', 'props.valueSections', and 'props.width'. Either include them or remove the dependency array.","line":93,"column":6,"nodeType":"ArrayExpression","endLine":93,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [props.alarmSound, props.backgroundColor, props.backgroundVisible, props.digitalFont, props.foregroundVisible, props.frameDesign, props.frameVisible, props.fullScaleDeflectionTime, props.height, props.labelNumberFormat, props.lcdColor, props.lcdDecimals, props.lcdVisible, props.ledColor, props.maxValue, props.minValue, props.niceScale, props.playAlarm, props.showLed, props.showMaxMeasuredValue, props.showMinMeasuredValue, props.showThreshold, props.threshold, props.thresholdRising, props.titleString, props.unitString, props.valueColor, props.valueGradient, props.valueSections, props.width]","fix":{"range":[2723,2725],"text":"[props.alarmSound, props.backgroundColor, props.backgroundVisible, props.digitalFont, props.foregroundVisible, props.frameDesign, props.frameVisible, props.fullScaleDeflectionTime, props.height, props.labelNumberFormat, props.lcdColor, props.lcdDecimals, props.lcdVisible, props.ledColor, props.maxValue, props.minValue, props.niceScale, props.playAlarm, props.showLed, props.showMaxMeasuredValue, props.showMinMeasuredValue, props.showThreshold, props.threshold, props.thresholdRising, props.titleString, props.unitString, props.valueColor, props.valueGradient, props.valueSections, props.width]"}}]}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from \"react\"\r\nimport {\r\n  LinearBargraphParams,\r\n  LinearBargraph,\r\n  Section,\r\n  gradientWrapper,\r\n} from \"steelseries\"\r\nimport { useDidUpdate } from \"../hooks/common\"\r\nimport {\r\n  useSetGaugeProp,\r\n  useSetGaugeValue,\r\n  useUpdateGaugeProp,\r\n} from \"../hooks/gauge-update\"\r\n\r\ntype ExcludedParams =\r\n  | \"section\"\r\n  | \"valueGradient\"\r\n  | \"useValueGradient\"\r\n  | \"ledVisible\"\r\n  | \"minMeasuredValueVisible\"\r\n  | \"maxMeasuredValueVisible\"\r\n  | \"thresholdVisible\"\r\ninterface Props extends Omit<LinearBargraphParams, ExcludedParams> {\r\n  width: number\r\n  height: number\r\n\r\n  showLed?: boolean\r\n  showThreshold?: boolean\r\n  showMinMeasuredValue?: boolean\r\n  showMaxMeasuredValue?: boolean\r\n\r\n  valueSections?: Section[]\r\n  valueGradient?: gradientWrapper\r\n\r\n  value?: number\r\n  minMeasuredValue?: number\r\n  maxMeasuredValue?: number\r\n\r\n  animate?: boolean\r\n  animationCallback?: () => void\r\n\r\n  resetValueOnBoundsChange?: boolean\r\n}\r\n\r\nexport function LinearBargraphGauge(props: Props) {\r\n  const canvas = useRef<HTMLCanvasElement>(null)\r\n  const gauge = useRef<LinearBargraph>(null)\r\n\r\n  // Init gauge\r\n  useEffect(() => {\r\n    if (canvas.current) {\r\n      gauge.current = new LinearBargraph(canvas.current, {\r\n        width: props.width,\r\n        height: props.height,\r\n\r\n        frameDesign: props.frameDesign,\r\n        frameVisible: props.frameVisible,\r\n        backgroundColor: props.backgroundColor,\r\n        backgroundVisible: props.backgroundVisible,\r\n        foregroundVisible: props.foregroundVisible,\r\n\r\n        lcdColor: props.lcdColor,\r\n        digitalFont: props.digitalFont,\r\n        lcdDecimals: props.lcdDecimals,\r\n        lcdVisible: props.lcdVisible,\r\n\r\n        ledColor: props.ledColor,\r\n        ledVisible: props.showLed === undefined ? false : props.showLed,\r\n\r\n        minValue: props.minValue,\r\n        maxValue: props.maxValue,\r\n        minMeasuredValueVisible: props.showMinMeasuredValue,\r\n        maxMeasuredValueVisible: props.showMaxMeasuredValue,\r\n        niceScale: props.niceScale,\r\n        labelNumberFormat: props.labelNumberFormat,\r\n        threshold: props.threshold,\r\n        thresholdRising: props.thresholdRising,\r\n        thresholdVisible:\r\n          props.showThreshold === undefined ? false : props.showThreshold,\r\n        fullScaleDeflectionTime: props.fullScaleDeflectionTime,\r\n        playAlarm: props.playAlarm,\r\n        alarmSound: props.alarmSound,\r\n\r\n        titleString: props.titleString,\r\n        unitString: props.unitString,\r\n\r\n        valueColor: props.valueColor,\r\n        section: props.valueSections,\r\n        useValueGradient: props.valueGradient !== undefined,\r\n        valueGradient: props.valueGradient,\r\n      })\r\n    }\r\n  }, [])\r\n\r\n  // Update gauge\r\n  useUpdateGaugeProp(gauge, \"setFrameDesign\", props.frameDesign)\r\n  useUpdateGaugeProp(gauge, \"setBackgroundColor\", props.backgroundColor)\r\n\r\n  useUpdateGaugeProp(gauge, \"setLcdColor\", props.lcdColor)\r\n  useUpdateGaugeProp(gauge, \"setLcdDecimals\", props.lcdDecimals)\r\n\r\n  useUpdateGaugeProp(gauge, \"setLedColor\", props.ledColor)\r\n  useUpdateGaugeProp(gauge, \"setLedVisible\", props.showLed)\r\n\r\n  useUpdateGaugeProp(gauge, \"setValueColor\", props.valueColor)\r\n  useUpdateGaugeProp(gauge, \"setSection\", props.valueSections)\r\n  useDidUpdate(() => {\r\n    if (gauge.current) {\r\n      gauge.current\r\n        .setGradientActive(props.valueGradient !== undefined)\r\n        .setGradient(props.valueGradient)\r\n    }\r\n  }, [props.valueGradient])\r\n\r\n  useUpdateGaugeProp(gauge, \"setThreshold\", props.threshold)\r\n  useUpdateGaugeProp(gauge, \"setThresholdRising\", props.thresholdRising)\r\n  // BUG in 'steelseries' library -> Linear.setThresholdVisible might not work properly\r\n  useUpdateGaugeProp(gauge, \"setThresholdVisible\", props.showThreshold)\r\n\r\n  useUpdateGaugeProp(gauge, \"setTitleString\", props.titleString)\r\n  useUpdateGaugeProp(gauge, \"setUnitString\", props.unitString)\r\n\r\n  // Min Value\r\n  useDidUpdate(() => {\r\n    if (gauge.current) {\r\n      gauge.current.setMinValue(props.minValue)\r\n\r\n      if (props.resetValueOnBoundsChange && props.animate) {\r\n        gauge.current.setValue(gauge.current.getMinValue())\r\n      }\r\n    }\r\n  }, [props.minValue])\r\n  // Max Value\r\n  useDidUpdate(() => {\r\n    if (gauge.current) {\r\n      gauge.current.setMaxValue(props.maxValue)\r\n\r\n      if (props.resetValueOnBoundsChange && props.animate) {\r\n        gauge.current.setValue(gauge.current.getMinValue())\r\n      }\r\n    }\r\n  }, [props.maxValue])\r\n\r\n  useUpdateGaugeProp(\r\n    gauge,\r\n    \"setMinMeasuredValueVisible\",\r\n    props.showMinMeasuredValue\r\n  )\r\n  useUpdateGaugeProp(\r\n    gauge,\r\n    \"setMaxMeasuredValueVisible\",\r\n    props.showMaxMeasuredValue\r\n  )\r\n\r\n  useSetGaugeProp(gauge, \"setMinMeasuredValue\", props.minMeasuredValue)\r\n  useSetGaugeProp(gauge, \"setMaxMeasuredValue\", props.maxMeasuredValue)\r\n  useSetGaugeValue(gauge, props.value, props.animate, props.animationCallback, [\r\n    props.minValue,\r\n    props.maxValue,\r\n  ])\r\n\r\n  return <canvas ref={canvas}></canvas>\r\n}\r\n"},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\linear.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'props.alarmSound', 'props.backgroundColor', 'props.backgroundVisible', 'props.digitalFont', 'props.foregroundVisible', 'props.frameDesign', 'props.frameVisible', 'props.fullScaleDeflectionTime', 'props.gaugeType', 'props.height', 'props.labelNumberFormat', 'props.lcdColor', 'props.lcdDecimals', 'props.lcdVisible', 'props.ledColor', 'props.maxValue', 'props.minValue', 'props.niceScale', 'props.playAlarm', 'props.showLed', 'props.showMaxMeasuredValue', 'props.showMinMeasuredValue', 'props.showThreshold', 'props.threshold', 'props.thresholdRising', 'props.titleString', 'props.unitString', 'props.valueColor', and 'props.width'. Either include them or remove the dependency array.","line":79,"column":6,"nodeType":"ArrayExpression","endLine":79,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [props.alarmSound, props.backgroundColor, props.backgroundVisible, props.digitalFont, props.foregroundVisible, props.frameDesign, props.frameVisible, props.fullScaleDeflectionTime, props.gaugeType, props.height, props.labelNumberFormat, props.lcdColor, props.lcdDecimals, props.lcdVisible, props.ledColor, props.maxValue, props.minValue, props.niceScale, props.playAlarm, props.showLed, props.showMaxMeasuredValue, props.showMinMeasuredValue, props.showThreshold, props.threshold, props.thresholdRising, props.titleString, props.unitString, props.valueColor, props.width]","fix":{"range":[2398,2400],"text":"[props.alarmSound, props.backgroundColor, props.backgroundVisible, props.digitalFont, props.foregroundVisible, props.frameDesign, props.frameVisible, props.fullScaleDeflectionTime, props.gaugeType, props.height, props.labelNumberFormat, props.lcdColor, props.lcdDecimals, props.lcdVisible, props.ledColor, props.maxValue, props.minValue, props.niceScale, props.playAlarm, props.showLed, props.showMaxMeasuredValue, props.showMinMeasuredValue, props.showThreshold, props.threshold, props.thresholdRising, props.titleString, props.unitString, props.valueColor, props.width]"}}]}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from \"react\"\r\nimport { LinearParams, Linear } from \"steelseries\"\r\nimport { useDidUpdate } from \"../hooks/common\"\r\nimport {\r\n  useSetGaugeProp,\r\n  useSetGaugeValue,\r\n  useUpdateGaugeProp,\r\n} from \"../hooks/gauge-update\"\r\n\r\ntype ExcludedParams =\r\n  | \"ledVisible\"\r\n  | \"minMeasuredValueVisible\"\r\n  | \"maxMeasuredValueVisible\"\r\n  | \"thresholdVisible\"\r\ninterface Props extends Omit<LinearParams, ExcludedParams> {\r\n  width: number\r\n  height: number\r\n\r\n  showLed?: boolean\r\n  showThreshold?: boolean\r\n  showMinMeasuredValue?: boolean\r\n  showMaxMeasuredValue?: boolean\r\n\r\n  value?: number\r\n  minMeasuredValue?: number\r\n  maxMeasuredValue?: number\r\n\r\n  animate?: boolean\r\n  animationCallback?: () => void\r\n\r\n  resetValueOnBoundsChange?: boolean\r\n}\r\n\r\nexport function LinearGauge(props: Props) {\r\n  const canvas = useRef<HTMLCanvasElement>(null)\r\n  const gauge = useRef<Linear>(null)\r\n\r\n  // Init gauge\r\n  useEffect(() => {\r\n    if (canvas.current) {\r\n      gauge.current = new Linear(canvas.current, {\r\n        width: props.width,\r\n        height: props.height,\r\n\r\n        gaugeType: props.gaugeType,\r\n        frameDesign: props.frameDesign,\r\n        frameVisible: props.frameVisible,\r\n        backgroundColor: props.backgroundColor,\r\n        backgroundVisible: props.backgroundVisible,\r\n        foregroundVisible: props.foregroundVisible,\r\n\r\n        lcdColor: props.lcdColor,\r\n        digitalFont: props.digitalFont,\r\n        lcdDecimals: props.lcdDecimals,\r\n        lcdVisible: props.lcdVisible,\r\n\r\n        ledColor: props.ledColor,\r\n        ledVisible: props.showLed === undefined ? false : props.showLed,\r\n\r\n        valueColor: props.valueColor,\r\n        minValue: props.minValue,\r\n        maxValue: props.maxValue,\r\n        minMeasuredValueVisible: props.showMinMeasuredValue,\r\n        maxMeasuredValueVisible: props.showMaxMeasuredValue,\r\n        niceScale: props.niceScale,\r\n        labelNumberFormat: props.labelNumberFormat,\r\n        threshold: props.threshold,\r\n        thresholdRising: props.thresholdRising,\r\n        thresholdVisible:\r\n          props.showThreshold === undefined ? false : props.showThreshold,\r\n        fullScaleDeflectionTime: props.fullScaleDeflectionTime,\r\n        playAlarm: props.playAlarm,\r\n        alarmSound: props.alarmSound,\r\n\r\n        titleString: props.titleString,\r\n        unitString: props.unitString,\r\n      })\r\n    }\r\n  }, [])\r\n\r\n  // Update gauge\r\n  useUpdateGaugeProp(gauge, \"setFrameDesign\", props.frameDesign)\r\n  useUpdateGaugeProp(gauge, \"setBackgroundColor\", props.backgroundColor)\r\n\r\n  useUpdateGaugeProp(gauge, \"setLcdColor\", props.lcdColor)\r\n  useUpdateGaugeProp(gauge, \"setLcdDecimals\", props.lcdDecimals)\r\n\r\n  useUpdateGaugeProp(gauge, \"setLedColor\", props.ledColor)\r\n  useUpdateGaugeProp(gauge, \"setLedVisible\", props.showLed)\r\n\r\n  useUpdateGaugeProp(gauge, \"setValueColor\", props.valueColor)\r\n\r\n  useUpdateGaugeProp(gauge, \"setThreshold\", props.threshold)\r\n  useUpdateGaugeProp(gauge, \"setThresholdRising\", props.thresholdRising)\r\n  // BUG in 'steelseries' library -> Linear.setThresholdVisible might not work properly\r\n  useUpdateGaugeProp(gauge, \"setThresholdVisible\", props.showThreshold)\r\n\r\n  useUpdateGaugeProp(gauge, \"setTitleString\", props.titleString)\r\n  useUpdateGaugeProp(gauge, \"setUnitString\", props.unitString)\r\n\r\n  // Min Value\r\n  useDidUpdate(() => {\r\n    if (gauge.current) {\r\n      gauge.current.setMinValue(props.minValue)\r\n\r\n      if (props.resetValueOnBoundsChange && props.animate) {\r\n        gauge.current.setValue(gauge.current.getMinValue())\r\n      }\r\n    }\r\n  }, [props.minValue])\r\n  // Max Value\r\n  useDidUpdate(() => {\r\n    if (gauge.current) {\r\n      gauge.current.setMaxValue(props.maxValue)\r\n\r\n      if (props.resetValueOnBoundsChange && props.animate) {\r\n        gauge.current.setValue(gauge.current.getMinValue())\r\n      }\r\n    }\r\n  }, [props.maxValue])\r\n\r\n  useUpdateGaugeProp(\r\n    gauge,\r\n    \"setMinMeasuredValueVisible\",\r\n    props.showMinMeasuredValue\r\n  )\r\n  useUpdateGaugeProp(\r\n    gauge,\r\n    \"setMaxMeasuredValueVisible\",\r\n    props.showMaxMeasuredValue\r\n  )\r\n\r\n  useSetGaugeProp(gauge, \"setMinMeasuredValue\", props.minMeasuredValue)\r\n  useSetGaugeProp(gauge, \"setMaxMeasuredValue\", props.maxMeasuredValue)\r\n  useSetGaugeValue(gauge, props.value, props.animate, props.animationCallback, [\r\n    props.minValue,\r\n    props.maxValue,\r\n  ])\r\n\r\n  return <canvas ref={canvas}></canvas>\r\n}\r\n"},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\odometer.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'props.decimalBackColor', 'props.decimalForeColor', 'props.decimals', 'props.digits', 'props.font', 'props.height', 'props.valueBackColor', 'props.valueForeColor', and 'props.wobbleFactor'. Either include them or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [props.decimalBackColor, props.decimalForeColor, props.decimals, props.digits, props.font, props.height, props.valueBackColor, props.valueForeColor, props.wobbleFactor]","fix":{"range":[999,1001],"text":"[props.decimalBackColor, props.decimalForeColor, props.decimals, props.digits, props.font, props.height, props.valueBackColor, props.valueForeColor, props.wobbleFactor]"}}]}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from \"react\"\r\nimport { OdometerParams, Odometer } from \"steelseries\"\r\nimport { useSetGaugeValue } from \"../hooks/gauge-update\"\r\n\r\ninterface Props extends Omit<OdometerParams, \"_context\"> {\r\n  height: number\r\n\r\n  animate?: boolean\r\n  animationCallback?: () => {}\r\n}\r\n\r\nexport function OdometerGauge(props: Props) {\r\n  const canvas = useRef<HTMLCanvasElement>(null)\r\n  const gauge = useRef<Odometer>(null)\r\n\r\n  // Init gauge\r\n  useEffect(() => {\r\n    if (canvas.current) {\r\n      gauge.current = new Odometer(canvas.current, {\r\n        height: props.height,\r\n        digits: props.digits,\r\n        decimals: props.decimals,\r\n        decimalBackColor: props.decimalBackColor,\r\n        decimalForeColor: props.decimalForeColor,\r\n        font: props.font,\r\n        // value: props.animate ? 0 : props.value,\r\n        valueBackColor: props.valueBackColor,\r\n        valueForeColor: props.valueForeColor,\r\n        wobbleFactor: props.wobbleFactor,\r\n      })\r\n    }\r\n  }, [])\r\n\r\n  // Update gauge\r\n  useSetGaugeValue(gauge, props.value, props.animate, props.animationCallback)\r\n\r\n  return <canvas ref={canvas}></canvas>\r\n}\r\n"},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\radial-bargraph.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'props.alarmSound', 'props.backgroundColor', 'props.backgroundVisible', 'props.customLayer', 'props.digitalFont', 'props.foregroundType', 'props.foregroundVisible', 'props.fractionalScaleDecimals', 'props.frameDesign', 'props.frameVisible', 'props.fullScaleDeflectionTime', 'props.gaugeType', 'props.labelNumberFormat', 'props.lcdColor', 'props.lcdDecimals', 'props.lcdVisible', 'props.ledColor', 'props.maxValue', 'props.minValue', 'props.niceScale', 'props.playAlarm', 'props.showLed', 'props.showTrend', 'props.showUserLed', 'props.size', 'props.threshold', 'props.thresholdRising', 'props.tickLabelOrientation', 'props.titleString', 'props.trendColors', 'props.unitString', 'props.userLedColor', 'props.valueColor', 'props.valueGradient', and 'props.valueSections'. Either include them or remove the dependency array.","line":107,"column":6,"nodeType":"ArrayExpression","endLine":107,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [props.alarmSound, props.backgroundColor, props.backgroundVisible, props.customLayer, props.digitalFont, props.foregroundType, props.foregroundVisible, props.fractionalScaleDecimals, props.frameDesign, props.frameVisible, props.fullScaleDeflectionTime, props.gaugeType, props.labelNumberFormat, props.lcdColor, props.lcdDecimals, props.lcdVisible, props.ledColor, props.maxValue, props.minValue, props.niceScale, props.playAlarm, props.showLed, props.showTrend, props.showUserLed, props.size, props.threshold, props.thresholdRising, props.tickLabelOrientation, props.titleString, props.trendColors, props.unitString, props.userLedColor, props.valueColor, props.valueGradient, props.valueSections]","fix":{"range":[3046,3048],"text":"[props.alarmSound, props.backgroundColor, props.backgroundVisible, props.customLayer, props.digitalFont, props.foregroundType, props.foregroundVisible, props.fractionalScaleDecimals, props.frameDesign, props.frameVisible, props.fullScaleDeflectionTime, props.gaugeType, props.labelNumberFormat, props.lcdColor, props.lcdDecimals, props.lcdVisible, props.ledColor, props.maxValue, props.minValue, props.niceScale, props.playAlarm, props.showLed, props.showTrend, props.showUserLed, props.size, props.threshold, props.thresholdRising, props.tickLabelOrientation, props.titleString, props.trendColors, props.unitString, props.userLedColor, props.valueColor, props.valueGradient, props.valueSections]"}}]}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from \"react\"\r\nimport {\r\n  Section,\r\n  gradientWrapper,\r\n  TrendState,\r\n  RadialBargraphParams,\r\n  RadialBargraph,\r\n} from \"steelseries\"\r\nimport { useDidUpdate } from \"../hooks/common\"\r\nimport {\r\n  useSetGaugeProp,\r\n  useSetGaugeValue,\r\n  useUpdateGaugeProp,\r\n} from \"../hooks/gauge-update\"\r\n\r\ntype ExcludedParams =\r\n  | \"section\"\r\n  | \"valueGradient\"\r\n  | \"userLedVisible\"\r\n  | \"userLedState\"\r\n  | \"ledVisible\"\r\n  | \"trendVisible\"\r\ninterface Props extends Omit<RadialBargraphParams, ExcludedParams> {\r\n  size: number\r\n\r\n  showLed?: boolean\r\n  showUserLed?: boolean\r\n  userLedOn?: boolean\r\n  userLedBlink?: boolean\r\n\r\n  showTrend?: boolean\r\n\r\n  valueSections?: Section[]\r\n  valueGradient?: gradientWrapper\r\n\r\n  value?: number\r\n  trend?: TrendState\r\n\r\n  animate?: boolean\r\n  animationCallback?: () => void\r\n\r\n  resetValueOnBoundsChange?: boolean\r\n}\r\n\r\nexport function RadialBargraphGauge(props: Props) {\r\n  const canvas = useRef<HTMLCanvasElement>(null)\r\n  const gauge = useRef<RadialBargraph>(null)\r\n\r\n  // Init gauge\r\n  useEffect(() => {\r\n    if (canvas.current) {\r\n      gauge.current = new RadialBargraph(canvas.current, {\r\n        size: props.size,\r\n        gaugeType: props.gaugeType,\r\n\r\n        frameDesign: props.frameDesign,\r\n        frameVisible: props.frameVisible,\r\n        backgroundColor: props.backgroundColor,\r\n        backgroundVisible: props.backgroundVisible,\r\n        foregroundType: props.foregroundType,\r\n        foregroundVisible: props.foregroundVisible,\r\n\r\n        lcdColor: props.lcdColor,\r\n        digitalFont: props.digitalFont,\r\n        lcdDecimals: props.lcdDecimals,\r\n        lcdVisible: props.lcdVisible,\r\n\r\n        minValue: props.minValue,\r\n        maxValue: props.maxValue,\r\n        niceScale: props.niceScale,\r\n        labelNumberFormat: props.labelNumberFormat,\r\n        threshold: props.threshold,\r\n        thresholdRising: props.thresholdRising,\r\n        fullScaleDeflectionTime: props.fullScaleDeflectionTime,\r\n        playAlarm: props.playAlarm,\r\n        alarmSound: props.alarmSound,\r\n\r\n        titleString: props.titleString,\r\n        unitString: props.unitString,\r\n\r\n        ledColor: props.ledColor,\r\n        ledVisible: props.showLed === undefined ? false : props.showLed,\r\n\r\n        fractionalScaleDecimals: props.fractionalScaleDecimals,\r\n        tickLabelOrientation: props.tickLabelOrientation,\r\n        trendVisible: props.showTrend,\r\n        trendColors: props.trendColors,\r\n        userLedColor: props.userLedColor,\r\n        userLedVisible: props.showUserLed,\r\n        valueColor: props.valueColor,\r\n        section: props.valueSections,\r\n        useSectionColors: props.valueSections !== undefined,\r\n        valueGradient: props.valueGradient,\r\n        useValueGradient: props.valueGradient !== undefined,\r\n\r\n        customLayer: props.customLayer,\r\n      })\r\n    }\r\n\r\n    return function () {\r\n      if (gauge.current) {\r\n        gauge.current\r\n          .setThresholdRising(true)\r\n          .setThreshold(gauge.current.getMaxValue())\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  // Update gauge\r\n  useUpdateGaugeProp(gauge, \"setFrameDesign\", props.frameDesign)\r\n  useUpdateGaugeProp(gauge, \"setBackgroundColor\", props.backgroundColor)\r\n  useUpdateGaugeProp(gauge, \"setForegroundType\", props.foregroundType)\r\n\r\n  useUpdateGaugeProp(gauge, \"setLcdColor\", props.lcdColor)\r\n  useUpdateGaugeProp(gauge, \"setLcdDecimals\", props.lcdDecimals)\r\n\r\n  useUpdateGaugeProp(gauge, \"setLedColor\", props.ledColor)\r\n  useUpdateGaugeProp(gauge, \"setLedVisible\", props.showLed)\r\n\r\n  useUpdateGaugeProp(gauge, \"setLabelNumberFormat\", props.labelNumberFormat)\r\n  useUpdateGaugeProp(\r\n    gauge,\r\n    \"setFractionalScaleDecimals\",\r\n    props.fractionalScaleDecimals\r\n  )\r\n\r\n  useUpdateGaugeProp(gauge, \"setThreshold\", props.threshold)\r\n  useUpdateGaugeProp(gauge, \"setThresholdRising\", props.thresholdRising)\r\n\r\n  useSetGaugeProp(gauge, \"setUserLedOnOff\", props.userLedOn)\r\n  useSetGaugeProp(gauge, \"blinkUserLed\", props.userLedBlink)\r\n  useUpdateGaugeProp(gauge, \"setUserLedVisible\", props.showUserLed)\r\n  useUpdateGaugeProp(gauge, \"setUserLedColor\", props.userLedColor)\r\n\r\n  useUpdateGaugeProp(gauge, \"setValueColor\", props.valueColor)\r\n  useUpdateGaugeProp(gauge, \"setSection\", props.valueSections)\r\n  useUpdateGaugeProp(gauge, \"setGradient\", props.valueGradient)\r\n\r\n  useUpdateGaugeProp(gauge, \"setTitleString\", props.titleString)\r\n  useUpdateGaugeProp(gauge, \"setUnitString\", props.unitString)\r\n\r\n  useUpdateGaugeProp(gauge, \"setTrendVisible\", props.showTrend)\r\n  useSetGaugeProp(gauge, \"setTrend\", props.trend)\r\n\r\n  // Min Value\r\n  useDidUpdate(() => {\r\n    if (gauge.current) {\r\n      gauge.current.setMinValue(props.minValue)\r\n\r\n      if (props.resetValueOnBoundsChange && props.animate) {\r\n        gauge.current.setValue(gauge.current.getMinValue())\r\n      }\r\n    }\r\n  }, [props.minValue])\r\n  // Max Value\r\n  useDidUpdate(() => {\r\n    if (gauge.current) {\r\n      gauge.current.setMaxValue(props.maxValue)\r\n\r\n      if (props.resetValueOnBoundsChange && props.animate) {\r\n        gauge.current.setValue(gauge.current.getMinValue())\r\n      }\r\n    }\r\n  }, [props.maxValue])\r\n\r\n  useSetGaugeValue(gauge, props.value, props.animate, props.animationCallback, [\r\n    props.minValue,\r\n    props.maxValue,\r\n  ])\r\n\r\n  return <canvas ref={canvas}></canvas>\r\n}\r\n"},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\radial-vertical.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'props.alarmSound', 'props.backgroundColor', 'props.backgroundVisible', 'props.foregroundType', 'props.foregroundVisible', 'props.frameDesign', 'props.frameVisible', 'props.fullScaleDeflectionTime', 'props.knobStyle', 'props.knobType', 'props.labelNumberFormat', 'props.ledColor', 'props.maxValue', 'props.minValue', 'props.niceScale', 'props.orientation', 'props.playAlarm', 'props.pointerColor', 'props.pointerType', 'props.sections', 'props.sectors', 'props.showLed', 'props.showMaxMeasuredValue', 'props.showMinMeasuredValue', 'props.showThreshold', 'props.size', 'props.threshold', 'props.thresholdRising', 'props.titleString', and 'props.unitString'. Either include them or remove the dependency array.","line":86,"column":6,"nodeType":"ArrayExpression","endLine":86,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [props.alarmSound, props.backgroundColor, props.backgroundVisible, props.foregroundType, props.foregroundVisible, props.frameDesign, props.frameVisible, props.fullScaleDeflectionTime, props.knobStyle, props.knobType, props.labelNumberFormat, props.ledColor, props.maxValue, props.minValue, props.niceScale, props.orientation, props.playAlarm, props.pointerColor, props.pointerType, props.sections, props.sectors, props.showLed, props.showMaxMeasuredValue, props.showMinMeasuredValue, props.showThreshold, props.size, props.threshold, props.thresholdRising, props.titleString, props.unitString]","fix":{"range":[2559,2561],"text":"[props.alarmSound, props.backgroundColor, props.backgroundVisible, props.foregroundType, props.foregroundVisible, props.frameDesign, props.frameVisible, props.fullScaleDeflectionTime, props.knobStyle, props.knobType, props.labelNumberFormat, props.ledColor, props.maxValue, props.minValue, props.niceScale, props.orientation, props.playAlarm, props.pointerColor, props.pointerType, props.sections, props.sectors, props.showLed, props.showMaxMeasuredValue, props.showMinMeasuredValue, props.showThreshold, props.size, props.threshold, props.thresholdRising, props.titleString, props.unitString]"}}]}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from \"react\"\r\nimport { RadialVerticalParams, RadialVertical, Section } from \"steelseries\"\r\nimport { useDidUpdate } from \"../hooks/common\"\r\nimport {\r\n  useSetGaugeProp,\r\n  useSetGaugeValue,\r\n  useUpdateGaugeProp,\r\n} from \"../hooks/gauge-update\"\r\n\r\ntype ExcludedParams =\r\n  | \"area\"\r\n  | \"section\"\r\n  | \"minMeasuredValueVisible\"\r\n  | \"maxMeasuredValueVisible\"\r\n  | \"thresholdVisible\"\r\n  | \"ledVisible\"\r\ninterface Props extends Omit<RadialVerticalParams, ExcludedParams> {\r\n  size: number\r\n\r\n  sections?: Section[]\r\n  sectors?: Section[]\r\n\r\n  showThreshold?: boolean\r\n  showLed?: boolean\r\n\r\n  showMinMeasuredValue?: boolean\r\n  showMaxMeasuredValue?: boolean\r\n\r\n  value?: number\r\n  minMeasuredValue?: number\r\n  maxMeasuredValue?: number\r\n\r\n  animate?: boolean\r\n  animationCallback?: () => void\r\n\r\n  resetValueOnBoundsChange?: boolean\r\n}\r\n\r\nexport function RadialVerticalGauge(props: Props) {\r\n  const canvas = useRef<HTMLCanvasElement>(null)\r\n  const gauge = useRef<RadialVertical>(null)\r\n\r\n  // Init gauge\r\n  useEffect(() => {\r\n    if (canvas.current) {\r\n      gauge.current = new RadialVertical(canvas.current, {\r\n        size: props.size,\r\n        orientation: props.orientation,\r\n\r\n        frameDesign: props.frameDesign,\r\n        frameVisible: props.frameVisible,\r\n        backgroundColor: props.backgroundColor,\r\n        backgroundVisible: props.backgroundVisible,\r\n        foregroundType: props.foregroundType,\r\n        foregroundVisible: props.foregroundVisible,\r\n\r\n        knobType: props.knobType,\r\n        knobStyle: props.knobStyle,\r\n        pointerType: props.pointerType,\r\n        pointerColor: props.pointerColor,\r\n\r\n        minValue: props.minValue,\r\n        maxValue: props.maxValue,\r\n        minMeasuredValueVisible: props.showMinMeasuredValue,\r\n        maxMeasuredValueVisible: props.showMaxMeasuredValue,\r\n        niceScale: props.niceScale,\r\n        labelNumberFormat: props.labelNumberFormat,\r\n        threshold: props.threshold,\r\n        thresholdRising: props.thresholdRising,\r\n        thresholdVisible:\r\n          props.showThreshold === undefined ? false : props.showThreshold,\r\n        fullScaleDeflectionTime: props.fullScaleDeflectionTime,\r\n        playAlarm: props.playAlarm,\r\n        alarmSound: props.alarmSound,\r\n\r\n        titleString: props.titleString,\r\n        unitString: props.unitString,\r\n\r\n        ledColor: props.ledColor,\r\n        ledVisible: props.showLed === undefined ? false : props.showLed,\r\n\r\n        section: props.sections,\r\n        area: props.sectors,\r\n      })\r\n    }\r\n  }, [])\r\n\r\n  // Update gauge\r\n  useUpdateGaugeProp(gauge, \"setFrameDesign\", props.frameDesign)\r\n  useUpdateGaugeProp(gauge, \"setBackgroundColor\", props.backgroundColor)\r\n  useUpdateGaugeProp(gauge, \"setForegroundType\", props.foregroundType)\r\n\r\n  useUpdateGaugeProp(gauge, \"setPointerColor\", props.pointerColor)\r\n  useUpdateGaugeProp(gauge, \"setPointerType\", props.pointerType)\r\n\r\n  useUpdateGaugeProp(gauge, \"setLedColor\", props.ledColor)\r\n  useUpdateGaugeProp(gauge, \"setLedVisible\", props.showLed)\r\n\r\n  useUpdateGaugeProp(gauge, \"setThresholdRising\", props.thresholdRising)\r\n  // BUG in 'steelseries' library - setThresholdVisible not working\r\n  useUpdateGaugeProp(gauge, \"setThresholdVisible\", props.showThreshold)\r\n\r\n  useUpdateGaugeProp(\r\n    gauge,\r\n    \"setMinMeasuredValueVisible\",\r\n    props.showMinMeasuredValue\r\n  )\r\n  useUpdateGaugeProp(\r\n    gauge,\r\n    \"setMaxMeasuredValueVisible\",\r\n    props.showMaxMeasuredValue\r\n  )\r\n  useSetGaugeProp(gauge, \"setMinMeasuredValue\", props.minMeasuredValue)\r\n  useSetGaugeProp(gauge, \"setMaxMeasuredValue\", props.maxMeasuredValue)\r\n\r\n  // Min Value\r\n  useDidUpdate(() => {\r\n    if (gauge.current) {\r\n      gauge.current.setMinValue(props.minValue)\r\n\r\n      if (props.resetValueOnBoundsChange && props.animate) {\r\n        gauge.current.setValue(gauge.current.getMinValue())\r\n      }\r\n    }\r\n  }, [props.minValue])\r\n  // Max Value\r\n  useDidUpdate(() => {\r\n    if (gauge.current) {\r\n      gauge.current.setMaxValue(props.maxValue)\r\n\r\n      if (props.resetValueOnBoundsChange && props.animate) {\r\n        gauge.current.setValue(gauge.current.getMinValue())\r\n      }\r\n    }\r\n  }, [props.maxValue])\r\n\r\n  useSetGaugeValue(gauge, props.value, props.animate, props.animationCallback, [\r\n    props.minValue,\r\n    props.maxValue,\r\n  ])\r\n\r\n  return <canvas ref={canvas}></canvas>\r\n}\r\n"},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\radial.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'props.alarmSound', 'props.backgroundColor', 'props.backgroundVisible', 'props.customLayer', 'props.digitalFont', 'props.foregroundType', 'props.foregroundVisible', 'props.fractionalScaleDecimals', 'props.frameDesign', 'props.frameVisible', 'props.fullScaleDeflectionTime', 'props.gaugeType', 'props.knobStyle', 'props.knobType', 'props.labelNumberFormat', 'props.lcdColor', 'props.lcdDecimals', 'props.lcdVisible', 'props.ledColor', 'props.maxValue', 'props.minValue', 'props.niceScale', 'props.odometerParams', 'props.playAlarm', 'props.pointerColor', 'props.pointerType', 'props.sections', 'props.sectors', 'props.showLed', 'props.showMaxMeasuredValue', 'props.showMinMeasuredValue', 'props.showThreshold', 'props.showTrend', 'props.showUserLed', 'props.size', 'props.syncOdometerValue', 'props.threshold', 'props.thresholdRising', 'props.tickLabelOrientation', 'props.titleString', 'props.trendColors', 'props.unitString', 'props.useOdometer', and 'props.userLedColor'. Either include them or remove the dependency array.","line":129,"column":6,"nodeType":"ArrayExpression","endLine":129,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [props.alarmSound, props.backgroundColor, props.backgroundVisible, props.customLayer, props.digitalFont, props.foregroundType, props.foregroundVisible, props.fractionalScaleDecimals, props.frameDesign, props.frameVisible, props.fullScaleDeflectionTime, props.gaugeType, props.knobStyle, props.knobType, props.labelNumberFormat, props.lcdColor, props.lcdDecimals, props.lcdVisible, props.ledColor, props.maxValue, props.minValue, props.niceScale, props.odometerParams, props.playAlarm, props.pointerColor, props.pointerType, props.sections, props.sectors, props.showLed, props.showMaxMeasuredValue, props.showMinMeasuredValue, props.showThreshold, props.showTrend, props.showUserLed, props.size, props.syncOdometerValue, props.threshold, props.thresholdRising, props.tickLabelOrientation, props.titleString, props.trendColors, props.unitString, props.useOdometer, props.userLedColor]","fix":{"range":[3700,3702],"text":"[props.alarmSound, props.backgroundColor, props.backgroundVisible, props.customLayer, props.digitalFont, props.foregroundType, props.foregroundVisible, props.fractionalScaleDecimals, props.frameDesign, props.frameVisible, props.fullScaleDeflectionTime, props.gaugeType, props.knobStyle, props.knobType, props.labelNumberFormat, props.lcdColor, props.lcdDecimals, props.lcdVisible, props.ledColor, props.maxValue, props.minValue, props.niceScale, props.odometerParams, props.playAlarm, props.pointerColor, props.pointerType, props.sections, props.sectors, props.showLed, props.showMaxMeasuredValue, props.showMinMeasuredValue, props.showThreshold, props.showTrend, props.showUserLed, props.size, props.syncOdometerValue, props.threshold, props.thresholdRising, props.tickLabelOrientation, props.titleString, props.trendColors, props.unitString, props.useOdometer, props.userLedColor]"}}]}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from \"react\"\r\nimport {\r\n  OdometerParams,\r\n  RadialParams,\r\n  Radial,\r\n  Section,\r\n  TrendState,\r\n} from \"steelseries\"\r\nimport { useDidUpdate } from \"../hooks/common\"\r\nimport {\r\n  useSetGaugeProp,\r\n  useSetGaugeValue,\r\n  useUpdateGaugeProp,\r\n} from \"../hooks/gauge-update\"\r\n\r\n// BUG @types/steelseries\r\n// Define a subset of params for Radial Odometer\r\ntype RadialOdometerParams = Omit<\r\n  OdometerParams,\r\n  \"_context\" | \"height\" | \"value\" | \"wobbleFactor\"\r\n>\r\n\r\ntype ExcludedParams =\r\n  | \"odometerUseValue\"\r\n  | \"area\"\r\n  | \"section\"\r\n  | \"userLedVisible\"\r\n  | \"minMeasuredValueVisible\"\r\n  | \"maxMeasuredValueVisible\"\r\n  | \"odometerParams\"\r\n  | \"userLedState\"\r\n  | \"thresholdVisible\"\r\n  | \"ledVisible\"\r\n  | \"trendVisible\"\r\ninterface Props extends Omit<RadialParams, ExcludedParams> {\r\n  size: number\r\n\r\n  sections?: Section[]\r\n  sectors?: Section[]\r\n\r\n  showThreshold?: boolean\r\n\r\n  showLed?: boolean\r\n  showUserLed?: boolean\r\n  userLedOn?: boolean\r\n  userLedBlink?: boolean\r\n\r\n  showTrend?: boolean\r\n  showMinMeasuredValue?: boolean\r\n  showMaxMeasuredValue?: boolean\r\n\r\n  value?: number\r\n  trend?: TrendState\r\n  minMeasuredValue?: number\r\n  maxMeasuredValue?: number\r\n  odometerValue?: number\r\n  syncOdometerValue?: boolean\r\n  odometerParams?: RadialOdometerParams\r\n\r\n  animate?: boolean\r\n  animationCallback?: () => void\r\n\r\n  resetValueOnBoundsChange?: boolean\r\n}\r\n\r\nexport function RadialGauge(props: Props) {\r\n  const canvas = useRef<HTMLCanvasElement>(null)\r\n  const gauge = useRef<Radial>(null)\r\n\r\n  // Init gauge\r\n  useEffect(() => {\r\n    if (canvas.current) {\r\n      gauge.current = new Radial(canvas.current, {\r\n        size: props.size,\r\n        gaugeType: props.gaugeType,\r\n\r\n        frameDesign: props.frameDesign,\r\n        frameVisible: props.frameVisible,\r\n        backgroundColor: props.backgroundColor,\r\n        backgroundVisible: props.backgroundVisible,\r\n        foregroundType: props.foregroundType,\r\n        foregroundVisible: props.foregroundVisible,\r\n\r\n        knobType: props.knobType,\r\n        knobStyle: props.knobStyle,\r\n        pointerType: props.pointerType,\r\n        pointerColor: props.pointerColor,\r\n\r\n        lcdColor: props.lcdColor,\r\n        digitalFont: props.digitalFont,\r\n        lcdDecimals: props.lcdDecimals,\r\n        lcdVisible: props.lcdVisible,\r\n\r\n        minValue: props.minValue,\r\n        maxValue: props.maxValue,\r\n        minMeasuredValueVisible: props.showMinMeasuredValue,\r\n        maxMeasuredValueVisible: props.showMaxMeasuredValue,\r\n        niceScale: props.niceScale,\r\n        labelNumberFormat: props.labelNumberFormat,\r\n        threshold: props.threshold,\r\n        thresholdRising: props.thresholdRising,\r\n        thresholdVisible:\r\n          props.showThreshold === undefined ? false : props.showThreshold,\r\n        fullScaleDeflectionTime: props.fullScaleDeflectionTime,\r\n        playAlarm: props.playAlarm,\r\n        alarmSound: props.alarmSound,\r\n\r\n        titleString: props.titleString,\r\n        unitString: props.unitString,\r\n\r\n        ledColor: props.ledColor,\r\n        ledVisible: props.showLed === undefined ? false : props.showLed,\r\n\r\n        fractionalScaleDecimals: props.fractionalScaleDecimals,\r\n        tickLabelOrientation: props.tickLabelOrientation,\r\n        trendVisible: props.showTrend,\r\n        trendColors: props.trendColors,\r\n        userLedColor: props.userLedColor,\r\n        userLedVisible: props.showUserLed,\r\n        section: props.sections,\r\n        area: props.sectors,\r\n        useOdometer: props.useOdometer,\r\n        odometerParams: props.odometerParams,\r\n        odometerUseValue: props.syncOdometerValue,\r\n\r\n        customLayer: props.customLayer,\r\n      })\r\n    }\r\n  }, [])\r\n\r\n  // Update gauge\r\n  useUpdateGaugeProp(gauge, \"setFrameDesign\", props.frameDesign)\r\n  useUpdateGaugeProp(gauge, \"setBackgroundColor\", props.backgroundColor)\r\n  useUpdateGaugeProp(gauge, \"setForegroundType\", props.foregroundType)\r\n\r\n  useUpdateGaugeProp(gauge, \"setPointerColor\", props.pointerColor)\r\n  useUpdateGaugeProp(gauge, \"setPointerType\", props.pointerType)\r\n\r\n  useUpdateGaugeProp(gauge, \"setLcdColor\", props.lcdColor)\r\n  useUpdateGaugeProp(gauge, \"setLcdDecimals\", props.lcdDecimals)\r\n\r\n  useUpdateGaugeProp(gauge, \"setLedColor\", props.ledColor)\r\n  useUpdateGaugeProp(gauge, \"setLedVisible\", props.showLed)\r\n\r\n  useUpdateGaugeProp(gauge, \"setLabelNumberFormat\", props.labelNumberFormat)\r\n  useUpdateGaugeProp(\r\n    gauge,\r\n    \"setFractionalScaleDecimals\",\r\n    props.fractionalScaleDecimals\r\n  )\r\n\r\n  useUpdateGaugeProp(gauge, \"setThreshold\", props.threshold)\r\n  useUpdateGaugeProp(gauge, \"setThresholdRising\", props.thresholdRising)\r\n  // BUG in 'steelseries' library - setThresholdVisible not working\r\n  useUpdateGaugeProp(gauge, \"setThresholdVisible\", props.showThreshold)\r\n\r\n  useSetGaugeProp(gauge, \"setUserLedOnOff\", props.userLedOn)\r\n  useSetGaugeProp(gauge, \"blinkUserLed\", props.userLedBlink)\r\n  useUpdateGaugeProp(gauge, \"setUserLedVisible\", props.showUserLed)\r\n  useUpdateGaugeProp(gauge, \"setUserLedColor\", props.userLedColor)\r\n\r\n  useUpdateGaugeProp(gauge, \"setSection\", props.sections)\r\n  useUpdateGaugeProp(gauge, \"setArea\", props.sectors)\r\n\r\n  useSetGaugeProp(gauge, \"setUserLedOnOff\", props.userLedOn)\r\n  useSetGaugeProp(gauge, \"blinkUserLed\", props.userLedBlink)\r\n\r\n  useUpdateGaugeProp(gauge, \"setTitleString\", props.titleString)\r\n  useUpdateGaugeProp(gauge, \"setUnitString\", props.unitString)\r\n\r\n  useUpdateGaugeProp(gauge, \"setTrendVisible\", props.showTrend)\r\n  useSetGaugeProp(gauge, \"setTrend\", props.trend)\r\n\r\n  useUpdateGaugeProp(\r\n    gauge,\r\n    \"setMinMeasuredValueVisible\",\r\n    props.showMinMeasuredValue\r\n  )\r\n  useUpdateGaugeProp(\r\n    gauge,\r\n    \"setMaxMeasuredValueVisible\",\r\n    props.showMaxMeasuredValue\r\n  )\r\n  useSetGaugeProp(gauge, \"setMinMeasuredValue\", props.minMeasuredValue)\r\n  useSetGaugeProp(gauge, \"setMaxMeasuredValue\", props.maxMeasuredValue)\r\n\r\n  // Min Value\r\n  useDidUpdate(() => {\r\n    if (gauge.current) {\r\n      gauge.current.setMinValue(props.minValue)\r\n\r\n      if (props.resetValueOnBoundsChange && props.animate) {\r\n        gauge.current.setValue(gauge.current.getMinValue())\r\n      }\r\n    }\r\n  }, [props.minValue])\r\n  // Max Value\r\n  useDidUpdate(() => {\r\n    if (gauge.current) {\r\n      gauge.current.setMaxValue(props.maxValue)\r\n\r\n      if (props.resetValueOnBoundsChange && props.animate) {\r\n        gauge.current.setValue(gauge.current.getMinValue())\r\n      }\r\n    }\r\n  }, [props.maxValue])\r\n\r\n  useSetGaugeProp(gauge, \"setOdoValue\", props.odometerValue)\r\n  useSetGaugeValue(gauge, props.value, props.animate, props.animationCallback, [\r\n    props.minValue,\r\n    props.maxValue,\r\n  ])\r\n\r\n  return <canvas ref={canvas}></canvas>\r\n}\r\n"},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\stopwatch.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'props.backgroundColor', 'props.backgroundVisible', 'props.customLayer', 'props.foregroundType', 'props.foregroundVisible', 'props.frameDesign', 'props.frameVisible', 'props.pointerColor', and 'props.size'. Either include them or remove the dependency array.","line":45,"column":6,"nodeType":"ArrayExpression","endLine":45,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [props.backgroundColor, props.backgroundVisible, props.customLayer, props.foregroundType, props.foregroundVisible, props.frameDesign, props.frameVisible, props.pointerColor, props.size]","fix":{"range":[1300,1302],"text":"[props.backgroundColor, props.backgroundVisible, props.customLayer, props.foregroundType, props.foregroundVisible, props.frameDesign, props.frameVisible, props.pointerColor, props.size]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","line":75,"column":6,"nodeType":"ArrayExpression","endLine":75,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [props]","fix":{"range":[2394,2396],"text":"[props]"}}]}],"errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from \"react\"\r\nimport { StopwatchParams, Stopwatch } from \"steelseries\"\r\nimport { useUpdateGaugeProp } from \"../hooks/gauge-update\"\r\n\r\ninterface Props extends StopwatchParams {\r\n  size: number\r\n\r\n  startBtn?: string\r\n  lapBtn?: string\r\n  stopBtn?: string\r\n  resetBtn?: string\r\n\r\n  onLap?: (value: string) => void\r\n  onStop?: (value: string) => void\r\n}\r\n\r\nexport function StopwatchGauge(props: Props) {\r\n  const canvas = useRef<HTMLCanvasElement>(null)\r\n  const gauge = useRef<Stopwatch>(null)\r\n\r\n  const startBtnRef = useRef<HTMLElement>(null)\r\n  const lapBtnRef = useRef<HTMLElement>(null)\r\n  const stopBtnRef = useRef<HTMLElement>(null)\r\n  const resetBtnRef = useRef<HTMLElement>(null)\r\n\r\n  const lap = useRef(false)\r\n\r\n  // Init gauge\r\n  useEffect(() => {\r\n    if (canvas.current) {\r\n      gauge.current = new Stopwatch(canvas.current, {\r\n        size: props.size,\r\n\r\n        frameDesign: props.frameDesign,\r\n        frameVisible: props.frameVisible,\r\n        backgroundColor: props.backgroundColor,\r\n        backgroundVisible: props.backgroundVisible,\r\n        foregroundType: props.foregroundType,\r\n        foregroundVisible: props.foregroundVisible,\r\n\r\n        pointerColor: props.pointerColor,\r\n        customLayer: props.customLayer,\r\n      })\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (gauge.current) {\r\n      startBtnRef.current = document.getElementById(props.startBtn || \"\")\r\n      lapBtnRef.current = document.getElementById(props.lapBtn || \"\")\r\n      stopBtnRef.current = document.getElementById(props.stopBtn || \"\")\r\n      resetBtnRef.current = document.getElementById(props.resetBtn || \"\")\r\n\r\n      startBtnRef.current.addEventListener(\"click\", () => gauge.current.start())\r\n\r\n      lapBtnRef.current.addEventListener(\"click\", () => {\r\n        gauge.current.lap()\r\n        if (gauge.current.isRunning() && !lap.current) {\r\n          lap.current = true\r\n          props.onLap && props.onLap(gauge.current.getMeasuredTime())\r\n        } else if (lap.current) {\r\n          lap.current = false\r\n        }\r\n      })\r\n\r\n      stopBtnRef.current.addEventListener(\"click\", () => {\r\n        if (gauge.current.isRunning()) {\r\n          gauge.current.stop()\r\n          props.onStop && props.onStop(gauge.current.getMeasuredTime())\r\n        }\r\n      })\r\n\r\n      resetBtnRef.current.addEventListener(\"click\", () => gauge.current.reset())\r\n    }\r\n  }, [])\r\n\r\n  // Update gauge\r\n  useUpdateGaugeProp(gauge, \"setFrameDesign\", props.frameDesign)\r\n  useUpdateGaugeProp(gauge, \"setBackgroundColor\", props.backgroundColor)\r\n  useUpdateGaugeProp(gauge, \"setForegroundType\", props.foregroundType)\r\n\r\n  useUpdateGaugeProp(gauge, \"setPointerColor\", props.pointerColor)\r\n\r\n  return <canvas ref={canvas}></canvas>\r\n}\r\n"},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\traffic-light.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'props.height' and 'props.width'. Either include them or remove the dependency array.","line":27,"column":6,"nodeType":"ArrayExpression","endLine":27,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [props.height, props.width]","fix":{"range":[690,692],"text":"[props.height, props.width]"}}]}],"errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from \"react\"\r\n// @ts-ignore\r\nimport { TrafficlightParams, TrafficLight } from \"steelseries\"\r\nimport { useSetGaugeProp } from \"../hooks/gauge-update\"\r\n\r\ninterface Props extends TrafficlightParams {\r\n  width: number\r\n  height: number\r\n\r\n  redOn?: boolean\r\n  yellowOn?: boolean\r\n  greenOn?: boolean\r\n}\r\n\r\nexport function TrafficLightGauge(props: Props) {\r\n  const canvas = useRef<HTMLCanvasElement>(null)\r\n  const gauge = useRef<TrafficLight>(null)\r\n\r\n  // Init gauge\r\n  useEffect(() => {\r\n    if (canvas.current) {\r\n      gauge.current = new TrafficLight(canvas.current, {\r\n        width: props.width,\r\n        height: props.height,\r\n      })\r\n    }\r\n  }, [])\r\n\r\n  // Update gauge\r\n  useSetGaugeProp(gauge, \"setRedOn\", props.redOn)\r\n  useSetGaugeProp(gauge, \"setYellowOn\", props.yellowOn)\r\n  useSetGaugeProp(gauge, \"setGreenOn\", props.greenOn)\r\n\r\n  return <canvas ref={canvas}></canvas>\r\n}\r\n"},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\wind-direction.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'props.avgPointerColor', 'props.avgPointerType', 'props.backgroundColor', 'props.backgroundVisible', 'props.customLayer', 'props.degreeScale', 'props.degreeScaleHalf', 'props.digitalFont', 'props.foregroundType', 'props.foregroundVisible', 'props.frameDesign', 'props.frameVisible', 'props.fullScaleDeflectionTime', 'props.knobStyle', 'props.knobType', 'props.lcdColor', 'props.lcdTitleStrings', 'props.lcdVisible', 'props.lstPointerColor', 'props.lstPointerType', 'props.pointSymbols', 'props.pointSymbolsVisible', 'props.sections', 'props.sectors', 'props.showRose', 'props.size', 'props.titleString', and 'props.useColorLabels'. Either include them or remove the dependency array.","line":84,"column":6,"nodeType":"ArrayExpression","endLine":84,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [props.avgPointerColor, props.avgPointerType, props.backgroundColor, props.backgroundVisible, props.customLayer, props.degreeScale, props.degreeScaleHalf, props.digitalFont, props.foregroundType, props.foregroundVisible, props.frameDesign, props.frameVisible, props.fullScaleDeflectionTime, props.knobStyle, props.knobType, props.lcdColor, props.lcdTitleStrings, props.lcdVisible, props.lstPointerColor, props.lstPointerType, props.pointSymbols, props.pointSymbolsVisible, props.sections, props.sectors, props.showRose, props.size, props.titleString, props.useColorLabels]","fix":{"range":[2373,2375],"text":"[props.avgPointerColor, props.avgPointerType, props.backgroundColor, props.backgroundVisible, props.customLayer, props.degreeScale, props.degreeScaleHalf, props.digitalFont, props.foregroundType, props.foregroundVisible, props.frameDesign, props.frameVisible, props.fullScaleDeflectionTime, props.knobStyle, props.knobType, props.lcdColor, props.lcdTitleStrings, props.lcdVisible, props.lstPointerColor, props.lstPointerType, props.pointSymbols, props.pointSymbolsVisible, props.sections, props.sectors, props.showRose, props.size, props.titleString, props.useColorLabels]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'props.animate' and 'props.lstAnimationCallback'. Either include them or remove the dependency array.","line":115,"column":6,"nodeType":"ArrayExpression","endLine":115,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [props.animate, props.lstAnimationCallback, props.valueLatest]","fix":{"range":[3526,3545],"text":"[props.animate, props.lstAnimationCallback, props.valueLatest]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'props.animate' and 'props.avgAnimationCallback'. Either include them or remove the dependency array.","line":127,"column":6,"nodeType":"ArrayExpression","endLine":127,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [props.animate, props.avgAnimationCallback, props.valueAverage]","fix":{"range":[3847,3867],"text":"[props.animate, props.avgAnimationCallback, props.valueAverage]"}}]}],"errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from \"react\"\r\nimport {\r\n  WindDirectionParams,\r\n  WindDirection,\r\n  ColorDef,\r\n  PointerType,\r\n  Section,\r\n} from \"steelseries\"\r\nimport { useUpdateGaugeProp } from \"../hooks/gauge-update\"\r\n\r\ntype ExcludedParams =\r\n  | \"area\"\r\n  | \"section\"\r\n  | \"pointerTypeLatest\"\r\n  | \"pointerTypeAverage\"\r\n  | \"pointerColor\"\r\n  | \"pointerColorAverage\"\r\n  | \"roseVisible\"\r\ninterface Props extends Omit<WindDirectionParams, ExcludedParams> {\r\n  size: number\r\n\r\n  sections?: Section[]\r\n  sectors?: Section[]\r\n\r\n  lstPointerType?: PointerType\r\n  avgPointerType?: PointerType\r\n  lstPointerColor?: ColorDef\r\n  avgPointerColor?: ColorDef\r\n\r\n  showRose?: boolean\r\n\r\n  valueLatest?: number\r\n  valueAverage?: number\r\n\r\n  animate?: boolean\r\n  lstAnimationCallback?: () => void\r\n  avgAnimationCallback?: () => void\r\n}\r\n\r\nexport function WindDirectionGauge(props: Props) {\r\n  const canvas = useRef<HTMLCanvasElement>(null)\r\n  const gauge = useRef<WindDirection>(null)\r\n\r\n  // Init gauge\r\n  useEffect(() => {\r\n    if (canvas.current) {\r\n      gauge.current = new WindDirection(canvas.current, {\r\n        size: props.size,\r\n\r\n        frameDesign: props.frameDesign,\r\n        frameVisible: props.frameVisible,\r\n        backgroundColor: props.backgroundColor,\r\n        backgroundVisible: props.backgroundVisible,\r\n        foregroundType: props.foregroundType,\r\n        foregroundVisible: props.foregroundVisible,\r\n\r\n        knobType: props.knobType,\r\n        knobStyle: props.knobStyle,\r\n\r\n        pointerTypeLatest: props.lstPointerType,\r\n        pointerTypeAverage: props.avgPointerType,\r\n        pointerColor: props.lstPointerColor,\r\n        pointerColorAverage: props.avgPointerColor,\r\n\r\n        lcdColor: props.lcdColor,\r\n        digitalFont: props.digitalFont,\r\n        lcdVisible: props.lcdVisible,\r\n\r\n        section: props.sections,\r\n        area: props.sectors,\r\n        fullScaleDeflectionTime: props.fullScaleDeflectionTime,\r\n        pointSymbols: props.pointSymbols,\r\n        pointSymbolsVisible: props.pointSymbolsVisible,\r\n        degreeScale: props.degreeScale,\r\n        degreeScaleHalf: props.degreeScaleHalf,\r\n        roseVisible: props.showRose,\r\n        lcdTitleStrings: props.lcdTitleStrings,\r\n        titleString: props.titleString,\r\n        useColorLabels: props.useColorLabels,\r\n\r\n        customLayer: props.customLayer,\r\n      })\r\n    }\r\n  }, [])\r\n\r\n  // Update gauge\r\n  useUpdateGaugeProp(gauge, \"setFrameDesign\", props.frameDesign)\r\n  useUpdateGaugeProp(gauge, \"setBackgroundColor\", props.backgroundColor)\r\n  useUpdateGaugeProp(gauge, \"setForegroundType\", props.foregroundType)\r\n\r\n  useUpdateGaugeProp(gauge, \"setPointerType\", props.lstPointerType)\r\n  useUpdateGaugeProp(gauge, \"setPointerColor\", props.lstPointerColor)\r\n  useUpdateGaugeProp(gauge, \"setPointerTypeAverage\", props.avgPointerType)\r\n  useUpdateGaugeProp(gauge, \"setPointerColorAverage\", props.avgPointerColor)\r\n\r\n  useUpdateGaugeProp(gauge, \"setLcdColor\", props.lcdColor)\r\n\r\n  useUpdateGaugeProp(gauge, \"setSection\", props.sections)\r\n  useUpdateGaugeProp(gauge, \"setArea\", props.sectors)\r\n\r\n  useUpdateGaugeProp(gauge, \"setPointSymbols\", props.pointSymbols)\r\n  useUpdateGaugeProp(gauge, \"setLcdTitleStrings\", props.lcdTitleStrings)\r\n\r\n  useEffect(() => {\r\n    if (gauge.current) {\r\n      if (props.animate) {\r\n        gauge.current.setValueAnimatedLatest(\r\n          props.valueLatest,\r\n          props.lstAnimationCallback\r\n        )\r\n      } else {\r\n        gauge.current.setValueLatest(props.valueLatest)\r\n      }\r\n    }\r\n  }, [props.valueLatest])\r\n  useEffect(() => {\r\n    if (gauge.current) {\r\n      if (props.animate) {\r\n        gauge.current.setValueAnimatedAverage(\r\n          props.valueAverage,\r\n          props.avgAnimationCallback\r\n        )\r\n      } else {\r\n        gauge.current.setValueAverage(props.valueAverage)\r\n      }\r\n    }\r\n  }, [props.valueAverage])\r\n\r\n  return <canvas ref={canvas}></canvas>\r\n}\r\n"},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\components\\wind-rose.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'props.backgroundColor', 'props.backgroundVisible', 'props.foregroundType', 'props.foregroundVisible', 'props.frameDesign', 'props.frameVisible', 'props.odometerParams', 'props.pointSymbols', 'props.size', 'props.titleString', 'props.unitString', and 'props.useOdometer'. Either include them or remove the dependency array.","line":49,"column":6,"nodeType":"ArrayExpression","endLine":49,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [props.backgroundColor, props.backgroundVisible, props.foregroundType, props.foregroundVisible, props.frameDesign, props.frameVisible, props.odometerParams, props.pointSymbols, props.size, props.titleString, props.unitString, props.useOdometer]","fix":{"range":[1426,1428],"text":"[props.backgroundColor, props.backgroundVisible, props.foregroundType, props.foregroundVisible, props.frameDesign, props.frameVisible, props.odometerParams, props.pointSymbols, props.size, props.titleString, props.unitString, props.useOdometer]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'props.animate' and 'props.animationCallback'. Either include them or remove the dependency array.","line":72,"column":6,"nodeType":"ArrayExpression","endLine":72,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [props.animate, props.animationCallback, props.odometerValue]","fix":{"range":[2207,2228],"text":"[props.animate, props.animationCallback, props.odometerValue]"}}]}],"errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// BUG @types/steelseries\r\n\r\nimport React, { useEffect, useRef } from \"react\"\r\nimport { OdometerParams } from \"steelseries\"\r\nimport { RoseParams, Rose } from \"steelseries-rose-gauge\"\r\nimport { useSetGaugeProp, useUpdateGaugeProp } from \"../hooks/gauge-update\"\r\n\r\n// Define a subset of params for Radial/Rose Odometer\r\ntype RoseOdometerParams = Omit<\r\n  OdometerParams,\r\n  \"_context\" | \"height\" | \"value\" | \"wobbleFactor\"\r\n>\r\n\r\ninterface Props extends RoseParams {\r\n  size: number\r\n\r\n  value?: number[]\r\n  odometerValue?: number\r\n  odometerParams?: RoseOdometerParams\r\n\r\n  animate?: boolean\r\n  animationCallback?: () => void\r\n}\r\n\r\nexport function RoseGauge(props: Props) {\r\n  const canvas = useRef<HTMLCanvasElement>(null)\r\n  const gauge = useRef<Rose>(null)\r\n\r\n  // Init gauge\r\n  useEffect(() => {\r\n    if (canvas.current) {\r\n      gauge.current = new Rose(canvas.current, {\r\n        size: props.size,\r\n\r\n        frameDesign: props.frameDesign,\r\n        frameVisible: props.frameVisible,\r\n        backgroundColor: props.backgroundColor,\r\n        backgroundVisible: props.backgroundVisible,\r\n        foregroundType: props.foregroundType,\r\n        foregroundVisible: props.foregroundVisible,\r\n\r\n        pointSymbols: props.pointSymbols,\r\n        titleString: props.titleString,\r\n        unitString: props.unitString,\r\n        useOdometer: props.useOdometer,\r\n        odometerParams: props.odometerParams,\r\n      })\r\n    }\r\n  }, [])\r\n\r\n  // Update gauge\r\n  useUpdateGaugeProp(gauge, \"setFrameDesign\", props.frameDesign)\r\n  useUpdateGaugeProp(gauge, \"setBackgroundColor\", props.backgroundColor)\r\n  useUpdateGaugeProp(gauge, \"setForegroundType\", props.foregroundType)\r\n\r\n  useUpdateGaugeProp(gauge, \"setTitleString\", props.titleString)\r\n  useUpdateGaugeProp(gauge, \"setUnitString\", props.unitString)\r\n  useUpdateGaugeProp(gauge, \"setPointSymbols\", props.pointSymbols)\r\n\r\n  useSetGaugeProp(gauge, \"setValue\", props.value)\r\n  useEffect(() => {\r\n    if (gauge.current) {\r\n      if (props.animate) {\r\n        gauge.current.setOdoValueAnimated(\r\n          props.odometerValue,\r\n          props.animationCallback\r\n        )\r\n      } else {\r\n        gauge.current.setOdoValue(props.odometerValue)\r\n      }\r\n    }\r\n  }, [props.odometerValue])\r\n\r\n  return <canvas ref={canvas}></canvas>\r\n}\r\n"},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\hooks\\common.ts","messages":[{"ruleId":"tsdoc/syntax","severity":1,"message":"tsdoc-param-tag-with-invalid-optional-name: The @param should not include a JSDoc-style optional name; it must not be enclosed in '[ ]' brackets.","line":6,"column":11,"nodeType":null,"messageId":"tsdoc-param-tag-with-invalid-optional-name","endLine":6,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","line":21,"column":6,"nodeType":"Identifier","endLine":21,"endColumn":10},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'effect'. Either include it or remove the dependency array. If 'effect' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":21,"column":6,"nodeType":"Identifier","endLine":21,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [effect]","fix":{"range":[544,548],"text":"[effect]"}}]}],"errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from \"react\"\r\n\r\n/**\r\n * It runs the effect callback only after the first render\r\n * @param effect - React.EffectCallback\r\n * @param [deps] - An array of dependencies that will be used to determine if the\r\n * effect should be re-run.\r\n */\r\nexport function useDidUpdate(\r\n  effect: React.EffectCallback,\r\n  deps?: React.DependencyList\r\n) {\r\n  const firstRender = useRef(true)\r\n\r\n  useEffect(() => {\r\n    if (!firstRender.current) {\r\n      effect()\r\n    } else {\r\n      firstRender.current = false\r\n    }\r\n  }, deps)\r\n}\r\n"},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\hooks\\gauge-update.ts","messages":[{"ruleId":"tsdoc/syntax","severity":1,"message":"tsdoc-param-tag-with-invalid-type: The @param block should not include a JSDoc-style '{type}'","line":34,"column":11,"nodeType":null,"messageId":"tsdoc-param-tag-with-invalid-type","endLine":34,"endColumn":15},{"ruleId":"tsdoc/syntax","severity":1,"message":"tsdoc-param-tag-with-invalid-type: The @param block should not include a JSDoc-style '{type}'","line":35,"column":11,"nodeType":null,"messageId":"tsdoc-param-tag-with-invalid-type","endLine":35,"endColumn":14},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'gaugeRef' and 'setterName'. Either include them or remove the dependency array.","line":44,"column":6,"nodeType":"ArrayExpression","endLine":44,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [gaugeRef, setterName, value]","fix":{"range":[1387,1394],"text":"[gaugeRef, setterName, value]"}}]},{"ruleId":"tsdoc/syntax","severity":1,"message":"tsdoc-param-tag-with-invalid-type: The @param block should not include a JSDoc-style '{type}'","line":50,"column":11,"nodeType":null,"messageId":"tsdoc-param-tag-with-invalid-type","endLine":50,"endColumn":14},{"ruleId":"tsdoc/syntax","severity":1,"message":"tsdoc-param-tag-with-invalid-type: The @param block should not include a JSDoc-style '{type}'","line":51,"column":11,"nodeType":null,"messageId":"tsdoc-param-tag-with-invalid-type","endLine":51,"endColumn":20},{"ruleId":"tsdoc/syntax","severity":1,"message":"tsdoc-param-tag-with-invalid-type: The @param block should not include a JSDoc-style '{type}'","line":52,"column":11,"nodeType":null,"messageId":"tsdoc-param-tag-with-invalid-type","endLine":52,"endColumn":21},{"ruleId":"tsdoc/syntax","severity":1,"message":"tsdoc-param-tag-with-invalid-type: The @param block should not include a JSDoc-style '{type}'","line":53,"column":11,"nodeType":null,"messageId":"tsdoc-param-tag-with-invalid-type","endLine":53,"endColumn":27},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'animate', 'callback', and 'gaugeRef'. Either include them or remove the dependency array.","line":70,"column":6,"nodeType":"ArrayExpression","endLine":70,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [animate, callback, gaugeRef, value]","fix":{"range":[2191,2217],"text":"[animate, callback, gaugeRef, value]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a spread element in its dependency array. This means we can't statically verify whether you've passed the correct dependencies.","line":70,"column":14,"nodeType":"SpreadElement","endLine":70,"endColumn":31},{"ruleId":"tsdoc/syntax","severity":1,"message":"tsdoc-param-tag-with-invalid-type: The @param block should not include a JSDoc-style '{type}'","line":76,"column":11,"nodeType":null,"messageId":"tsdoc-param-tag-with-invalid-type","endLine":76,"endColumn":15},{"ruleId":"tsdoc/syntax","severity":1,"message":"tsdoc-param-tag-with-invalid-type: The @param block should not include a JSDoc-style '{type}'","line":77,"column":11,"nodeType":null,"messageId":"tsdoc-param-tag-with-invalid-type","endLine":77,"endColumn":14}],"errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MutableRefObject, DependencyList, useEffect } from \"react\"\r\nimport { useDidUpdate } from \"./common\"\r\n\r\ntype Ref<T> = MutableRefObject<T>\r\n\r\ntype Callback = () => void\r\ntype Getter = () => unknown\r\ntype Setter<G, V> = (value: V) => G | void\r\ntype SetterWithCallback<G, V> = (value: V, callback: Callback) => G | void\r\n\r\ntype Gauge<G, SN extends keyof G, V> = {\r\n  [setterName in SN]: Setter<G, V>\r\n} & {\r\n  [methodName in Exclude<keyof G, SN>]:\r\n    | Getter\r\n    | Setter<G, unknown>\r\n    | SetterWithCallback<G, unknown>\r\n}\r\n\r\n/** Base gauge with setValue and setValueAnimated methods + generic setters and getters */\r\ntype AnimatableGauge<G, V> = {\r\n  setValue: Setter<G, V>\r\n  setValueAnimated: SetterWithCallback<G, V>\r\n} & {\r\n  [methodName in Exclude<keyof G, \"setValue\" | \"setValueAnimated\">]:\r\n    | Getter\r\n    | Setter<G, unknown>\r\n    | SetterWithCallback<G, unknown>\r\n}\r\n\r\n/**\r\n * It calls a setter on a gauge, passing it a value, whenever the value changes\r\n * @param gaugeRef - Ref<G>\r\n * @param {SN} setterName - The name of the setter function to call on the gauge.\r\n * @param {V} value - The value to set the gauge property to.\r\n */\r\nexport function useSetGaugeProp<\r\n  V,\r\n  G extends Gauge<G, SN, V>,\r\n  SN extends keyof G\r\n>(gaugeRef: Ref<G>, setterName: SN, value: V) {\r\n  useEffect(() => {\r\n    gaugeRef.current && gaugeRef.current[setterName](value)\r\n  }, [value])\r\n}\r\n\r\n/**\r\n * It sets the value of a gauge, and optionally animates the change\r\n * @param gaugeRef - Ref<G> - a ref to the gauge\r\n * @param {V} value - The value to set the gauge to.\r\n * @param {boolean} animate - boolean - whether to animate the gauge or not\r\n * @param {Callback} callback - Callback\r\n * @param {DependencyList} additionalDeps - Additional dependencies of the effect\r\n */\r\nexport function useSetGaugeValue<V, G extends AnimatableGauge<G, V>>(\r\n  gaugeRef: Ref<G>,\r\n  value: V,\r\n  animate: boolean,\r\n  callback: Callback,\r\n  additionalDeps: DependencyList = []\r\n) {\r\n  useEffect(() => {\r\n    if (gaugeRef.current) {\r\n      if (animate) {\r\n        gaugeRef.current.setValueAnimated(value, callback)\r\n      } else {\r\n        gaugeRef.current.setValue(value)\r\n      }\r\n    }\r\n  }, [value, ...additionalDeps])\r\n}\r\n\r\n/**\r\n * It updates a gauge property when the value changes\r\n * @param gaugeRef - Ref<G>\r\n * @param {SN} setterName - The name of the setter function to call on the gauge.\r\n * @param {V} value - V\r\n */\r\nexport function useUpdateGaugeProp<\r\n  V,\r\n  G extends Gauge<G, SN, V>,\r\n  SN extends keyof G\r\n>(gaugeRef: Ref<G>, setterName: SN, value: V) {\r\n  useDidUpdate(() => {\r\n    gaugeRef.current && gaugeRef.current[setterName](value)\r\n  }, [value])\r\n}\r\n"},{"filePath":"C:\\Users\\ricky\\workspace\\raw\\react-steelseries\\src\\index.ts","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}]